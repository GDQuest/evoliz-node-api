/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/api/login': {
		/**
		 * Login user
		 * @description Login the user with valid public and secret keys
		 */
		post: {
			requestBody: components['requestBodies']['Login']
			responses: {
				/** @description Login successfull */
				200: {
					content: {
						'application/json': {
							/**
							 * @description Token that should be used for authentication as a Bearer Authorization Token
							 * @example 1234...
							 */
							access_token?: string
							/**
							 * Format: date-time
							 * @description Session's token duration. Set by default to 20 minutes
							 * @example 2019-10-10T09:26:40.000000Z
							 */
							expires_at?: string
							/**
							 * @description Scopes applied to the token
							 * @example [
							 *   "admin",
							 *   "company_users"
							 * ]
							 */
							scopes?: string[]
						}
					}
				}
				401: components['responses']['Unauthorized']
				422: components['responses']['Validation']
				429: components['responses']['ThrottleRequests']
			}
		}
	}
	'/api/v1/companies/{companyid}/clients': {
		/**
		 * Client list
		 * @description Return the client list of the specified or current user company
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Client’s creator ID */
					userid?: number
					/** @description Vat number */
					vat_number?: 'nc' | 'filled' | 'empty'
					/** @description Iso2 country code */
					country_iso2?: string
					/** @description Filter active / inactive clients */
					enabled?: boolean
					/** @description Search param */
					search?: string
					/**
					 * @description Filter clients with client code identifier
					 * @example C1
					 */
					code?: string
					/**
					 * @description Filter clients by their type
					 * @example pro
					 */
					type?: 'part' | 'pro' | 'gov'
					/** @description Sort the response by the given field, if not given the collection is sorted by `name` ascendantly. */
					sort_by?: 'clientid'
					order?: components['parameters']['orderParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['ClientCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Create a new client
		 * @description Create a new client with given data
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/** @description Client code, if not filled it will be automatically generated */
						code?: string
						/** @description Client name */
						name: string
						/**
						 * @description Client type
						 * @enum {string}
						 */
						type: 'Particulier' | 'Professionnel' | 'Administration publique'
						/** @description Client legal form */
						legalform?: string
						/** @description Client activity number */
						activity_number?: string
						/** @description Client immatriculation number */
						immat_number?: string
						/** @description Client bank informations */
						bank_information?: components['schemas']['BankInformation']
						/** @description Client address informations */
						address: {
							/** @description Address line 1 */
							addr?: string
							/** @description Address line 2 */
							addr2?: string
							/** @description Postcode */
							postcode: string
							/** @description Town */
							town: string
							/** @description Address ISO2 */
							iso2: string
						}
						/** @description Client delivery address informations */
						delivery_address?: {
							/** @description Delivery Address line 1 */
							addr?: string
							/** @description Delivery Address line 2 */
							addr2?: string
							/** @description Postcode */
							postcode: string
							/** @description Town */
							town: string
							/** @description Delivery Address ISO2 */
							iso2: string
						}
						/** @description Client phone number */
						phone?: string
						/** @description Client mobile number */
						mobile?: string
						/** @description Client fax number */
						fax?: string
						/** @description Client website URL */
						website?: string
						/**
						 * Format: float
						 * @description Amount of outstanding guarantee
						 * @example 4000
						 */
						safe_amount?: number
						/** @description Specific document conditions for the current client */
						term?: {
							/**
							 * @description Use legal collection cost
							 * @example false
							 */
							recovery_indemnity?: boolean
							/** @description Client's quote period of validity (in days) */
							validity?: number
							/**
							 * @description Penalty rate, prohibited if nopenalty is true
							 * @example 3
							 */
							penalty?: number
							/**
							 * @description Use legal mention about penalty rate
							 * @example false
							 */
							nopenalty?: boolean
							/**
							 * @description Discount rate, prohibited if no_discount_term is true
							 * @example 0
							 */
							discount_term?: number
							/**
							 * @description Define the display of the "no discount applicable" legal mention (prohibited if a discount_term is given)
							 * @example false
							 */
							no_discount_term?: boolean
							/**
							 * @description Payment term identifier
							 * @example 3
							 */
							paytermid?: number
							/**
							 * @description Payment type identifier
							 * @example 3
							 */
							paytypeid?: number
							/**
							 * Format: float
							 * @description Client's default vat rate
							 * @example 2.1
							 */
							vat_rate?: number
							/** @description Client's default vat exoneration reason, only accepted when vat exoneration option is enabled, must be one of [the vat exoneration reasons codes](#section/VAT-exoneration-reasons) */
							vat_exoneration?: unknown
							/**
							 * @description Client's default custom vat exoneration reason, only accepted when the selected `vat_exoneration` is `other`
							 * @example My custom vat exoneration reason
							 */
							vat_exoneration_other_reason?: string
							/**
							 * @description Analytic axis id, this field is accepted only when analytic option is enabled
							 * @example 12345
							 */
							analyticid?: number
							/**
							 * Format: float
							 * @description Client's default rebate in percent, must be between 0 and 100
							 * @example 5.25
							 */
							rebate_percent?: number
						}
						/** @description Billing option (true is incl. taxes, false is excl. taxes and null is Company billing option) */
						ttc?: boolean
						/** @description Comments on this client */
						comment?: string
						/** @description Client business Number (SIRET), if current user is located in FR-DOM-TOM this field can be required. */
						business_number?: string
						/** @description Client intra-community VAT number<br>Set the 'N/C' if Not Concerned, Not Known or Not Communicated, if current user is located in FR-DOM-TOM this field can be required. */
						vat_number?: string
					}
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['Client']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/clients/{clientid}': {
		/**
		 * Client detail
		 * @description Return a client by its speficied id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Client Id */
					clientid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Client']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies': {
		/**
		 * Company list
		 * @description Return a list of companies visible by the current User, according to visibility restriction set in user profile.
		 */
		get: operations['getListCompanies']
		/**
		 * Create company
		 * @description Create a new company.
		 */
		post: operations['createCompany']
	}
	'/api/v1/companies/{companyid}': {
		/**
		 * Company detail
		 * @description Return company details by its speficied id.
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Company']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/unlink': {
		/**
		 * Unlink company from prescriber
		 * @description Unlink the specified company from the connected prescriber.
		 */
		put: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description No Content */
				204: never
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/live': {
		/**
		 * Update prescriber company from test to live mode
		 * @description Changing a prescriber's company status from "test" to "live".
		 */
		put: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description No Content */
				204: never
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				405: components['responses']['MethodNotAllowed']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/contacts-clients': {
		/**
		 * Client contact list
		 * @description Return a client contact list
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Linked client ID */
					clientid?: number
					/** @description Filter active / inactive contacts client */
					enabled?: boolean
					/** @description Filter contacts by their consent informations */
					consent?: 'without' | 'unauthorized' | 'authorized'
					/** @description Search param */
					search?: string
					/** @description Filter contacts with email address */
					email?: string
					/** @description Sort the response by the given field. If not given, the collection is sorted by `lastname` ascendantly. */
					sort_by?: 'contactid'
					order?: components['parameters']['orderParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['ContactClientCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Create a new client contact
		 * @description Create a new client contact with given data
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/** @description The client's id to attach the contact to */
						clientid: number
						civility?: components['schemas']['Civility']
						/** @description Contact last name */
						lastname: string
						/** @description Contact first name */
						firstname?: string
						/**
						 * @description Contact profil
						 * @example Director
						 */
						profil?: string
						/** @description Contact email */
						email: string
						/**
						 * @description Contact consent informations
						 * @default without
						 * @enum {string}
						 */
						consent?: 'without' | 'authorized' | 'unauthorized'
						label_tel_primary?: components['schemas']['LabelTel']
						/**
						 * @description Primary phone number, required when label_tel_primary is present
						 * @example 01 46 72 50 04
						 */
						tel_primary?: string
						label_tel_secondary?: components['schemas']['LabelTel']
						/**
						 * @description Secondary phone number, required when label_tel_secondary is present
						 * @example 01 46 72 50 04
						 */
						tel_secondary?: string
						label_tel_tertiary?: components['schemas']['LabelTel']
						/**
						 * @description Tertiary phone number, required when label_tel_tertiary is present
						 * @example 01 46 72 50 04
						 */
						tel_tertiary?: string
					}
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['ContactClient']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				405: components['responses']['MethodNotAllowed']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/contacts-clients/{contactid}': {
		/**
		 * Client contact detail
		 * @description Return a client contact by it's id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Contact Id */
					contactid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['ContactClient']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/contacts-prospects': {
		/**
		 * Prospect contact list
		 * @description Return a prospect contact list
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Linked prospect ID */
					prospectid?: number
					/** @description Filter contacts by their consent informations */
					consent?: 'without' | 'unauthorized' | 'authorized'
					/** @description Search param */
					search?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['ContactProspectCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Create a new prospect contact
		 * @description Create a new prospect contact with given data
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/** @description The prospect's id to attach the contact to */
						prospectid: number
						civility?: components['schemas']['Civility']
						/** @description Contact last name */
						lastname: string
						/** @description Contact first name */
						firstname?: string
						/**
						 * @description Contact profil
						 * @example Director
						 */
						profil?: string
						/** @description Contact email */
						email?: string
						/**
						 * @description Contact consent informations
						 * @default without
						 * @enum {string}
						 */
						consent?: 'without' | 'authorized' | 'unauthorized'
						label_tel_primary?: components['schemas']['LabelTel']
						/**
						 * @description Primary phone number, required when ``label_tel_primary`` is present
						 * @example 01 46 72 50 04
						 */
						tel_primary?: string
						label_tel_secondary?: components['schemas']['LabelTel']
						/**
						 * @description Secondary phone number, required when ``label_tel_secondary`` is present
						 * @example 01 46 72 50 04
						 */
						tel_secondary?: string
						label_tel_tertiary?: components['schemas']['LabelTel']
						/**
						 * @description Tertiary phone number, required when ``label_tel_tertiary`` is present
						 * @example 01 46 72 50 04
						 */
						tel_tertiary?: string
					}
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['ContactProspect']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/contacts-prospects/{contactid}': {
		/**
		 * Prospect contact detail
		 * @description Return a prospect contact by it's id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Contact Prospect Id */
					contactid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['ContactProspect']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/deliveries': {
		/**
		 * Delivery list
		 * @description Return a list of deliveries visible by the current User, according to visibility restriction set in user profile
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Delivery's creator id */
					userid?: number
					/** @description Delivery's client id */
					clientid?: number
					/**
					 * @description ISO currency code
					 * @example EUR
					 */
					currency?: string
					/** @description Delivery's status */
					status?:
						| 'filled'
						| 'create'
						| 'sent'
						| 'reject'
						| 'accept'
						| 'wait'
						| 'invoice'
						| 'close'
						| 'noinvoice'
						| 'all'
					/** @description Payment method id */
					paytypeid?: number
					/** @description Analytic axis id */
					analyticid?: number
					/** @description Minimun amount (require amount_max parameter) */
					amount_min?: number
					/** @description Maximum amount (require amount_min parameter) */
					amount_max?: number
					/** @description Set vat type to filter with amount_min and amount_max parameter. */
					amount_type?: components['schemas']['AmountType']
					/** @description Search parameter */
					search?: string
					/** @description Deliveries period */
					period?: components['schemas']['Period']
					/** @description Deliveries min date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Deliveries max date. Must be uses with date_min and period set to custom. */
					date_max?: string
					/** @description Sort the response by the given field. */
					sort_by?: 'deliveryid'
					order?: components['parameters']['orderParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['DeliveryCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/payments': {
		/**
		 * Payment list
		 * @description Return a list of payments visible by the current User, according to visibility restriction set in user profile
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Amount minimum must be used with amount_max */
					amount_min?: number
					/** @description Amount maximum must be used with amount_min */
					amount_max?: number
					/** @description Linked client Id */
					clientid?: number
					/** @description Payment method id */
					paytypeid?: number
					/** @description Period of payments */
					period?: components['schemas']['Period']
					/** @description Date minimum of payments. Must be used with date_min and period set to custom. */
					date_min?: string
					/** @description Date maximum of payments. Must be used with date_max and period set to custom. */
					date_max?: string
					/** @description Creator of payments */
					userid?: number
					/** @description Payment's type */
					typedoc?: 'invoice' | 'advance'
					/** @description Search param */
					search?: string
					/** @description Sort the response by the given field, if not given the collection is sorted by `paydate` descendantly. */
					sort_by?: 'paymentid'
					order?: components['parameters']['orderParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['PaymentCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/payments/{paymentid}': {
		/**
		 * Payment detail
		 * @description Return a payment by its speficied id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Payment Id */
					paymentid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Payment']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/purchase-classifications': {
		/**
		 * Purchases classifications list
		 * @description Return a list of Purchases classifications
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Filter active / inactive classifications */
					enabled?: boolean
					/** @description Search parameter */
					search?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['PurchaseClassificationCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/purchase-classifications/{classificationid}': {
		/**
		 * Purchase classification detail
		 * @description Return a purchase classification by its specified Id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Classification Id */
					classificationid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['PurchaseClassification']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/purchase-affectations': {
		/**
		 * Purchases affectations list
		 * @description Return a list of purchase affectations
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Filter active / inactive affectations */
					enabled?: boolean
					/** @description Search parameter */
					search?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['PurchaseAffectationCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/purchase-affectations/{affectationid}': {
		/**
		 * Purchase affectation detail
		 * @description Return a purchase affectation by its specified Id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Affectation Id */
					affectationid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['PurchaseAffectation']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/invoices': {
		/**
		 * Invoice list
		 * @description Return a list of invoices visible by the current User, according to visibility restriction set in user profile
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Invoice’s creator ID. */
					userid?: number
					/** @description Client id */
					clientid?: number
					/**
					 * @description ISO currency code.
					 * @example EUR
					 */
					currency?: string
					/** @description Filter active / inactive invoices. */
					enabled?: boolean
					/** @description Invoice's type. */
					typedoc?: 'invoice' | 'retention' | 'situation' | 'benefit'
					status?:
						| 'filled'
						| 'create'
						| 'sent'
						| 'inpayment'
						| 'paid'
						| 'match'
						| 'nopaid'
						| 'unpaid'
						| 'all'
						| 'locked'
						| 'vat'
						| 'directdebit'
					/** @description Minimun amount (require amount_max parameter). */
					amount_min?: number
					/** @description Maximum amount (require amount_min parameter). */
					amount_max?: number
					/** @description Set vat type to filter with amount_min and amount_max parameter. */
					amount_type?: components['schemas']['AmountType']
					/** @description Search param. */
					search?: string
					/** @description Invoices period. */
					period?: components['schemas']['Period']
					/** @description Invoices min date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Invoices max date. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Payment method id. */
					paytypeid?: number
					/** @description Analytic axis id. */
					analyticid?: number
					/** @description Direct debit initialized on invoices or not. */
					direct_debit?: boolean
					/** @description Sort the response by the given field, if not given the collection is sorted by `document_date` and `document_number` descendantly. */
					sort_by?: 'invoiceid'
					order?: components['parameters']['orderParameter']
					document_number?: components['parameters']['documentNumberParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['InvoiceCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Create a new invoice
		 * @description Create a new draft invoice with given data. Totals, margins, retention, included VAT fields are automatically calculated.
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/**
						 * @description External Document number, must be unique
						 * @example EXT001
						 */
						external_document_number: string
						/**
						 * Format: date
						 * @description Document date
						 * @example 2019-10-10
						 */
						documentdate: string
						/**
						 * @description The client's id to attach the invoice to
						 * @example 9876
						 */
						clientid: number
						/**
						 * @description The client's contact id to adress the invoice to
						 * @example 8568
						 */
						contactid?: number
						/**
						 * @description object on the document
						 * @example Abonnement Logiciel Gestion Commerciale
						 */
						object?: string
						/** @description Invoice condition informations */
						term?: {
							/**
							 * @description Penalty rate, prohibited if nopenalty is true
							 * @example 3
							 */
							penalty?: number
							/**
							 * @description Define the display of legal mention about penalty rate on the created document (prohibited if a penalty is given)
							 * @example false
							 */
							nopenalty?: boolean
							/**
							 * @description Use legal mention about recovery indemnity
							 * @example false
							 */
							recovery_indemnity?: boolean
							/**
							 * @description Discount rate, prohibited if no_discount_term is true
							 * @example 0
							 */
							discount_term?: number
							/**
							 * @description Define the display of the no discount applicable legal mention (prohibited if a discount_term is given)
							 * @example false
							 */
							no_discount_term?: boolean
							/**
							 * @description Payment term identifier
							 * @example 3
							 */
							paytermid: number
							/**
							 * Format: date
							 * @description Payment due date, required if paytermid is 18 (Saisir une date), must be after or equal to documentdate
							 * @example 2019-10-10
							 */
							duedate?: string
							/**
							 * @description Payment delay in days, required if paytermid is 16 (Autre condition)
							 * @example 20
							 */
							paydelay?: number
							/**
							 * @description Payment is due at the end of the month, required if paytermid is 16 (Autre condition)
							 * @example true
							 */
							endmonth?: boolean
							/**
							 * @description Payment day, required if paytermid is 16 (Autre condition)
							 * @example 25
							 */
							payday?: number
							/**
							 * @description Payment type identifier
							 * @example 3
							 */
							paytypeid?: number
						}
						/**
						 * @description Comments on the invoice with html
						 * @example Titulaire du compte : Hingis160 SARL<br />
						 * Domiciliation du compte : Boulogne<br />
						 * IBAN : FR7612345678901234567890123
						 */
						comment?: string
						/**
						 * @description Analytic axis id, this field is accepted only when analytic option is enabled, required if invoice is checked in analytic configuration.
						 * @example 12345
						 */
						analyticid?: number
						global_rebate?: number | string
						/**
						 * Format: date
						 * @description Execution date of payment terms
						 * @example 2019-09-12
						 */
						execdate?: string
						/** @description Invoice retention information */
						retention?: {
							/**
							 * Format: float
							 * @description Retention percent, this field is accepted only when retention option is enabled, required if retention date is given
							 * @example 5
							 */
							percent?: number
							/**
							 * Format: date
							 * @description Retention date, this field is accepted only when retention option is enabled, required if retention percent is given
							 * @example 2020-12-19
							 */
							date?: string
						}
						/**
						 * @description Indicate whether to include sale general conditions in the document PDF or not
						 * @default false
						 * @example true
						 */
						include_sale_general_conditions?: boolean
						/** @description Invoice items */
						items?: (
							| (components['schemas']['ItemWithoutArticleId'] &
									Record<string, never> & {
										/**
										 * Format: float
										 * @description Item purchase unit price vat excluded, must be less than unit price vat excluded
										 */
										purchase_unit_price_vat_exclude?: number | null
									})
							| (components['schemas']['ItemWithArticleId'] &
									Record<string, never> & {
										/**
										 * Format: float
										 * @description Override article purchase unit price, must be less than unit price vat excluded
										 */
										purchase_unit_price_vat_exclude?: number | null
									})
						)[]
					}
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['Invoice']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/invoices/{invoiceid}/create': {
		/**
		 * Save an invoice
		 * @description Save the invoice with a definitive document number. The status must be “filled” and will be changed to “created”
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Draft Invoice Id */
					invoiceid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Invoice']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/advances': {
		/**
		 * Advance list
		 * @description Return a list of advances visible by the current User, according to visibility restriction set in user profile
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Advance’s creator ID */
					userid?: number
					/**
					 * @description ISO currency code
					 * @example EUR
					 */
					currency?: string
					/** @description Filter active / inactive advances */
					enabled?: boolean
					status?:
						| 'filled'
						| 'create'
						| 'sent'
						| 'inpayment'
						| 'paid'
						| 'match'
						| 'nopaid'
						| 'unpaid'
						| 'all'
						| 'locked'
						| 'vat'
						| 'directdebit'
					/** @description Minimun amount (require amount_max parameter) */
					amount_min?: number
					/** @description Maximum amount (require amount_min parameter) */
					amount_max?: number
					/** @description Set vat type to filter with amount_min and amount_max parameter. */
					amount_type?: components['schemas']['AmountType']
					/** @description Search param */
					search?: string
					/** @description Advances period */
					period?: components['schemas']['Period']
					/** @description Advances min date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Advances max date. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Payment method id */
					paytypeid?: number
					/** @description Analytic axis id */
					analyticid?: number
					/** @description Direct debit initialized on advances or not. */
					direct_debit?: boolean
					/** @description Client id */
					clientid?: number
					/** @description Sort the response by the given field, if not given the collection is sorted by `document_date` and `document_number` descendantly. */
					sort_by?: 'advanceid'
					order?: components['parameters']['orderParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['AdvanceCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/advances/{advanceid}/payments': {
		/**
		 * List of payments on an advance
		 * @description List all payments of the given advance
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Advance Id */
					advanceid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['PaymentCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Create a new payment on an advance
		 * @description Create a new payement with given data
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Advance Id */
					advanceid: number
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/**
						 * Format: date
						 * @description Payment entry date
						 * @example 2019-10-10
						 */
						paydate: string
						/**
						 * @description Payment label
						 * @example Règlement client
						 */
						label: string
						/**
						 * @description Payment method id
						 * @example 4
						 */
						paytypeid: number
						/**
						 * Format: float
						 * @description Payment amount (must be equal to advance left to pay)
						 * @example 537.71
						 */
						amount: number
						/**
						 * @description Comments on the payment
						 * @example Chèque numéro 1234
						 */
						comment?: string
					}
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['Payment']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/credits': {
		/**
		 * Credit list
		 * @description Return a list of credits visible by the current User, according to visibility restriction set in user profile
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Credit’s creator ID */
					userid?: number
					/**
					 * @description ISO currency code
					 * @example EUR
					 */
					currency?: string
					/** @description Filter active / inactive credits */
					enabled?: boolean
					status?:
						| 'filled'
						| 'create'
						| 'sent'
						| 'inpayment'
						| 'paid'
						| 'match'
						| 'nopaid'
						| 'unpaid'
						| 'all'
						| 'locked'
						| 'vat'
					/** @description Minimun amount (require amount_max parameter) */
					amount_min?: number
					/** @description Maximum amount (require amount_min parameter) */
					amount_max?: number
					/** @description Set vat type to filter with amount_min and amount_max parameter. */
					amount_type?: components['schemas']['AmountType']
					/** @description Search param */
					search?: string
					/** @description Credits period */
					period?: components['schemas']['Period']
					/** @description Credits min date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Credits max date. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Payment method id */
					paytypeid?: number
					/** @description Analytic axis id */
					analyticid?: number
					/** @description Client id */
					clientid?: number
					/** @description Sort the response by the given field, if not given the collection is sorted by `document_date` and `document_number` descendantly. */
					sort_by?: 'invoiceid'
					order?: components['parameters']['orderParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['CreditCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/buys': {
		/**
		 * Buy list
		 * @description Return a list of buys visible by the current User, according to visibility restriction set in user profile
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Buy’s creator ID */
					userid?: number
					/** @description Buy’s supplier ID */
					supplierid?: number
					/** @description Buy’s client ID */
					clientid?: number
					/** @description Filter active / inactive buys */
					enabled?: boolean
					/** @description Buy has file or not */
					file?: boolean
					/** @description Buy is billable or not */
					billable?: boolean
					/** @description Buy classification id */
					classificationid?: number
					status?:
						| 'create'
						| 'inpayment'
						| 'prepare'
						| 'voucher'
						| 'paid'
						| 'match'
						| 'nopaid'
						| 'unpaid'
						| 'locked'
						| 'vat'
					/** @description Minimun amount (require amount_max parameter) */
					amount_min?: number
					/** @description Maximum amount (require amount_min parameter) */
					amount_max?: number
					/** @description Set vat type to filter with amount_min and amount_max parameter. */
					amount_type?: components['schemas']['AmountType']
					/** @description Search param */
					search?: string
					/** @description Buys period */
					period?: components['schemas']['Period']
					/** @description Buys min date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Buys max date. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Payment method id */
					paytypeid?: number
					/** @description Analytic axis id */
					analyticid?: number
					/** @description Supplier Pay initialized on buys or not. */
					supplier_pay?: boolean
					/** @description Sort the response by the given field, if not given the collection is sorted by `documentdate` descendantly. */
					sort_by?: 'buyid'
					order?: components['parameters']['orderParameter']
					document_type?: 'buy' | 'expense_report'
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['BuyCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Create a new buy
		 * @description Create a new buy with given data.
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/**
						 * @description The supplier's id to attach the buy to.
						 * @example 9876
						 */
						supplierid: number
						/**
						 * Format: date
						 * @description Document date.
						 * @example 2022-03-30
						 */
						documentdate: string
						/**
						 * @description Label of the buy.
						 * @example Abonnement Logiciel Gestion Commerciale
						 */
						label: string
						/**
						 * Format: float
						 * @description The buy total including vat.
						 * @example 80.75
						 */
						total_vat_include: number
						/**
						 * @description External document number written on the document.
						 * @example EXT0001
						 */
						external_document_number?: string
						/**
						 * @description Analytic axis id, this field is accepted only when analytic option is enabled, required if buy is checked in analytic configuration.
						 * @example 12345
						 */
						analyticid?: number
						/**
						 * @description The client's id to attach the buy to.
						 * @example 9876
						 */
						clientid?: number
						/**
						 * @description Tells whether the buy is billable, required with `clientid`.
						 * @example false
						 */
						billable?: boolean
						/**
						 * @description Comments on the buy.
						 * @example Titulaire du compte : Hingis160 SARL Domiciliation du compte : Boulogne IBAN : FR7612345678901234567890123
						 */
						comment?: string
						/** @description Document condition informations. */
						term?: {
							/**
							 * @description Payment term identifier.
							 * @example 3
							 */
							paytermid?: number
							/**
							 * Format: date
							 * @description Payment due date, required if paytermid is 18 (Saisir une date), must be after or equal to documentdate, otherwise it is automatically calculated.
							 * @example 2022-03-30
							 */
							duedate?: string
							/**
							 * @description Payment delay in days, required if paytermid is 16 (Autre condition).
							 * @example 20
							 */
							paydelay?: number
							/**
							 * @description Payment is due at the end of the month, required if paytermid is 16 (Autre condition).
							 * @example true
							 */
							endmonth?: boolean
							/**
							 * @description Payment day, required if paytermid is 16 (Autre condition).
							 * @example 25
							 */
							payday?: number
							/**
							 * @description Payment type identifier.
							 * @example 3
							 */
							paytypeid?: number
						}
						/**
						 * Format: date
						 * @description The buy start date.
						 * @example 2022-03-30
						 */
						startdate?: string
						/**
						 * Format: date
						 * @description The buy end date.
						 * @example 2022-09-12
						 */
						enddate?: string
						/**
						 * @description Buy items, the total of all `total_vat_exclude` must be less than or equal `total_vat_include` and must not be equal to 0.
						 *
						 * The buy total vat is automatically calculated, the maximum accepted vat rate is 30%.
						 *
						 * Example : if `total_vat_include` is equal to 100 and the sum of all `items.*.total_vat_exclude` is equal to 70, the vat rate here is 42.86% compared to `total_vat_include` which is not accepted, a 400 HTTP response code will be returned.
						 */
						items: {
							/**
							 * @description Purchase classification id.
							 * @example 705
							 */
							classificationid?: number
							/**
							 * Format: float
							 * @description Item total excluding vat.
							 * @example 25.23
							 */
							total_vat_exclude: number
						}[]
					}
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['Buy']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/sale-classifications': {
		/**
		 * Sales classifications list
		 * @description Return a list of sales classification
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Filter active / inactive classifications */
					enabled?: boolean
					/** @description Search parameter */
					search?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['SaleClassificationCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/sale-classifications/{classificationid}': {
		/**
		 * Sales classification detail
		 * @description Return a sale classification by its specified Id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Classification Id */
					classificationid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['SaleClassification']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/sale-affectations': {
		/**
		 * Sales affectations list
		 * @description Return a list of sale affectation
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Filter active / inactive affectations */
					enabled?: boolean
					/** @description Search parameter */
					search?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['SaleAffectationCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/sale-affectations/{affectationid}': {
		/**
		 * Sales affectation detail
		 * @description Return a sale affectation by its specified Id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Affectation Id */
					affectationid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['SaleAffectation']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/supplier-credits': {
		/**
		 * Supplier credit list
		 * @description Return a list of Supplier credits visible by the current User, according to visibility restriction set in user profile
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Supplier credit’s creator ID */
					userid?: number
					/** @description Supplier’s ID */
					supplierid?: number
					/** @description Filter active / inactive supplier credit */
					enabled?: boolean
					/** @description Supplier credit has file or not */
					file?: boolean
					status?: 'create' | 'paid' | 'match' | 'locked' | 'vat'
					/** @description Buy classification id */
					classificationid?: number
					/** @description Minimun amount (require amount_max parameter) */
					amount_min?: number
					/** @description Maximum amount (require amount_min parameter) */
					amount_max?: number
					/** @description Set vat type to filter with amount_min and amount_max parameter. */
					amount_type?: components['schemas']['AmountType']
					/** @description Search param */
					search?: string
					/** @description Supplier credit period */
					period?: components['schemas']['Period']
					/** @description Supplier credits min date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Supplier credits max date. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Payment method id */
					paytypeid?: number
					/** @description Analytic axis id */
					analyticid?: number
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['BuyCreditCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/buys/{buyid}': {
		/**
		 * Buy detail
		 * @description Return a buy by its speficied id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Buy Id */
					buyid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Buy']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/buys/{buyid}/locked': {
		/**
		 * Lock / unlock buy
		 * @description Update buy locked state
		 */
		put: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Buy Id */
					buyid: number
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/**
						 * @description Locked state
						 * @example true
						 */
						locked?: boolean
					}
				}
			}
			responses: {
				/** @description No content */
				204: never
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				422: components['responses']['Validation']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/bintray': {
		/**
		 * Bintray documents list
		 * @description Get all documents on company's bintray
		 */
		get: {
			parameters: {
				query?: {
					/** @description Document type */
					document_type?: 'buy' | 'expense_report'
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Bintray']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Send document to bintray
		 * @description Send your supplier invoice files. To send a file of several invoices put a stamp ☁ on the first page.
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			requestBody: {
				content: {
					'multipart/form-data': {
						/** @description Array of files that can contain multiple jpeg files or a pdf */
						files: string[]
						/**
						 * @description Submitted document type
						 * @default buy
						 * @enum {string}
						 */
						document_type?: 'buy' | 'expense_report'
						/** @description Submitted document purchase classification id (Allowed only with expense_report document type) */
						purchase_classificationid?: number
					}
				}
			}
			responses: {
				/** @description No content */
				204: never
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/bintray/me': {
		/**
		 * Personal bintray documents list
		 * @description Get all documents created by the authenticated user on company's bintray
		 */
		get: {
			parameters: {
				query?: {
					/** @description Document type */
					document_type?: 'buy' | 'expense_report'
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Bintray']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/supplier-credits/{supplier_creditid}': {
		/**
		 * Supplier credits detail
		 * @description Return a supplier credit by its speficied id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Supplier credit Id */
					supplier_creditid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['BuyCredit']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/supplier-credits/{supplier_creditid}/locked': {
		/**
		 * Lock / unlock supplier credit
		 * @description Update supplier credit locked state
		 */
		put: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Supplier credit Id */
					supplier_creditid: number
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/**
						 * @description Locked state
						 * @example true
						 */
						locked?: boolean
					}
				}
			}
			responses: {
				/** @description No content */
				204: never
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				422: components['responses']['Validation']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/reports/overdue-payment': {
		/**
		 * Overdue payment
		 * @description Get amount of overdue payments by period categories
		 */
		get: {
			parameters: {
				query?: {
					/** @description Documents creator ID */
					userid?: number
					/** @description Documents client ID */
					clientid?: string
					/** @description Document payment method id */
					paytypeid?: number
					/** @description Report is based on documents with retention */
					retention?: boolean
					/** @description Search param */
					search?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['OverduePaymentReport']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/reports/overdue-settlement': {
		/**
		 * Overdue settlement
		 * @description Get amount of overdue settlements by period categories
		 */
		get: {
			parameters: {
				query?: {
					/** @description Documents creator ID */
					userid?: number
					/** @description Documents supplier ID */
					supplierid?: string
					/** @description Document payment method id */
					paytypeid?: number
					/** @description Search param */
					search?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['OverdueSettlementReport']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/reports/turnover': {
		/**
		 * Turnover report
		 * @description Get turnover report data
		 */
		get: {
			parameters: {
				query?: {
					/** @description Documents creator ID */
					userid?: number
					/** @description Documents client ID */
					clientid?: string
					/** @description Active analytic axis */
					analyticid?: boolean
					/** @description Period of turnover */
					period?: components['schemas']['Period']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['TurnoverReport']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/journals/trial-balance': {
		/**
		 * Trial balance
		 * @description Get trial balance data
		 */
		get: {
			parameters: {
				query?: {
					/** @description Trial balance entries period */
					period?: components['schemas']['Period']
					/** @description Journal entries minimum date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Journal entries maximum date. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Include locked journal entries or not. */
					include_locked?: string
					/** @description Include unmatched bank items to the trial balance or not. */
					include_unmatched?: string
					/** @description Display specific journal entries. */
					journal?:
						| 'sales'
						| 'cashes'
						| 'banks'
						| 'miscellaneous-operations'
						| 'purchases'
						| 'opening-balance'
					/** @description Not displaying one or more journals entries. */
					excluded_journals?: (
						| 'sales'
						| 'cashes'
						| 'banks'
						| 'miscellaneous-operations'
						| 'purchases'
						| 'opening-balance'
					)[]
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['BalanceJournalCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/journals/general-ledger': {
		/**
		 * General Ledger
		 * @description Get general ledger data
		 */
		get: {
			parameters: {
				query?: {
					/** @description Trial balance entries period */
					period?: components['schemas']['Period']
					/** @description Journal entries minimum date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Journal entries maximum date. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Include locked journal entries or not. */
					include_locked?: string
					/** @description Include unmatched bank items to the trial balance or not. */
					include_unmatched?: string
					/** @description Display specific journal entries. */
					journal?:
						| 'sales'
						| 'cashes'
						| 'banks'
						| 'miscellaneous-operations'
						| 'purchases'
						| 'opening-balance'
					/** @description Not displaying one or more journals entries. */
					excluded_journals?: (
						| 'sales'
						| 'cashes'
						| 'banks'
						| 'miscellaneous-operations'
						| 'purchases'
						| 'opening-balance'
					)[]
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['GeneralLedgerCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/journals/purchases': {
		/**
		 * Purchases journal
		 * @description Get purchases journal data
		 */
		get: {
			parameters: {
				query?: {
					/** @description Journal entries period */
					period?: components['schemas']['Period']
					/** @description Journal entries minimum date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Journal entries maximum date. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Display only locked / unlocked entries */
					locked?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['PurchasesJournalCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/journals/miscellaneous-operations': {
		/**
		 * Miscellaneous operations journal
		 * @description Get miscellaneous operations journal entries
		 */
		get: {
			parameters: {
				query?: {
					/** @description Journal entries period */
					period?: components['schemas']['Period']
					/** @description Journal entries minimum date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Journal entries maximum date. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Display only locked / unlocked entries */
					locked?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['ODJournalCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/journals/opening-balance': {
		/**
		 * Opening balance journal
		 * @description Get opening balance journal entries
		 */
		get: {
			parameters: {
				query?: {
					/** @description Journal entries period */
					period?: components['schemas']['Period']
					/** @description Journal entries minimum date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Journal entries maximum date. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Display only locked / unlocked entries */
					locked?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['ANJournalCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/journals/banks': {
		/**
		 * Banks journal
		 * @description Get banks journal entries
		 */
		get: {
			parameters: {
				query?: {
					/** @description Journal entries period */
					period?: components['schemas']['Period']
					/** @description Journal entries minimum date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Journal entries maximum date. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Display only locked / unlocked entries */
					locked?: string
					/** @description journal entries bank identifier */
					bankid?: number
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['BankJournalCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/journals/sales': {
		/**
		 * Sales journal
		 * @description Get sales journal entries
		 */
		get: {
			parameters: {
				query?: {
					/** @description Journal entries period */
					period?: components['schemas']['Period']
					/** @description Journal entries minimum date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Journal entries maximum date. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Display only locked / unlocked entries */
					locked?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['SellJournalCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/journals/cashes': {
		/**
		 * Cashes journal
		 * @description Get Cashes journal entries
		 */
		get: {
			parameters: {
				query?: {
					/** @description Journal entries period */
					period?: components['schemas']['Period']
					/** @description Journal entries minimum date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Journal entries maximum date. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Display only locked / unlocked entries */
					locked?: string
					/** @description Cash configuration identifier */
					cash_confid?: number
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['CashJournalCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/journals/fec': {
		/**
		 * FEC journal
		 * @description Get FEC journal entries
		 */
		get: {
			parameters: {
				query?: {
					/** @description Journal entries period */
					period?: components['schemas']['Period']
					/** @description Journal entries minimum date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Journal entries maximum date. Must be used with date_min and period set to custom. */
					date_max?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['FecJournalCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/invoices/{invoiceid}': {
		/**
		 * Invoice detail
		 * @description Return an invoice by its speficied id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Invoice Id */
					invoiceid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Invoice']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/links/{doc_type}/{docid}': {
		/**
		 * Document's linked documents
		 * @description Return a list of documents links associated to the requested document
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Type of document */
					doc_type:
						| 'payment'
						| 'invoice'
						| 'advance'
						| 'credit'
						| 'quote'
						| 'corder'
						| 'delivery'
						| 'cash-deposit'
					/** @description Document id */
					docid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['LinkResource']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/invoices/{invoiceid}/send': {
		/**
		 * Send Invoice by email
		 * @description Send an email with a link to the invoice
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Invoice Id */
					invoiceid: number
				}
			}
			requestBody: components['requestBodies']['InvoiceSendEmail']
			responses: {
				/** @description No content */
				204: never
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				405: components['responses']['MethodNotAllowed']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/invoices/{invoiceid}/payments': {
		/**
		 * List of payments on an invoice
		 * @description List all payments of the given invoice
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Invoice Id */
					invoiceid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['PaymentCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Create a new payment on an invoice
		 * @description Create a new payement with given data
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Invoice Id */
					invoiceid: number
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/**
						 * Format: date
						 * @description Payment entry date
						 * @example 2019-10-10
						 */
						paydate: string
						/**
						 * @description Payment label
						 * @example Règlement client
						 */
						label: string
						/**
						 * @description Payment method id (Credit paytype is not allowed)
						 * @example 4
						 */
						paytypeid: number
						/**
						 * Format: float
						 * @description Payment amount (cannot be greater than invoice left to pay)
						 * @example 537.71
						 */
						amount: number
						/**
						 * @description Comments on the payment
						 * @example Chèque numéro 1234
						 */
						comment?: string
					}
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['Payment']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/credits/{creditid}': {
		/**
		 * Credit detail
		 * @description Return a credit by its speficied id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Credit Id */
					creditid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Credit']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/advances/{advanceid}': {
		/**
		 * Advance detail
		 * @description Return an advance by its speficied id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Advance Id */
					advanceid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Advance']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/template-menus': {
		/**
		 * Template menus list
		 * @description Return the list of your template menus.
		 */
		get: {
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['TemplateMenuCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/template-menus/{template_menuid}': {
		/**
		 * Template menu detail
		 * @description Return a specific template menu by it's id.
		 */
		get: {
			parameters: {
				path: {
					/** @description Template menu Id */
					template_menuid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['TemplateMenu']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/template-exports': {
		/**
		 * Template exports list
		 * @description Return the list of your template exports.
		 */
		get: {
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['TemplateExportCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/template-exports/{template_exportid}': {
		/**
		 * Template export detail
		 * @description Return a specific template export by it's id.
		 */
		get: {
			parameters: {
				path: {
					/** @description Template export Id */
					template_exportid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['TemplateExport']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/access-path': {
		/**
		 * Access Path availability
		 * @description Check the access path availability
		 */
		get: {
			parameters: {
				query: {
					/** @description Access path to check. */
					path: string
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': {
							/**
							 * @description Access Path availability
							 * @example true
							 */
							available?: boolean
						}
					}
				}
				422: components['responses']['Validation']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/subscriptions': {
		/**
		 * Subscriptions list
		 * @description Return the list of the company's subscriptions.
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['SubscriptionCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/banks': {
		/**
		 * Bank list
		 * @description Return a list of banks visible by the current user, according to visibility restriction set in user profile
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Filter active / inactive banks. */
					enabled?: boolean
					/** @description Search param */
					search?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['BankCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/banks/{bankid}': {
		/**
		 * Bank detail
		 * @description Return a bank details by its specific id, according to visibility restriction set in user profile
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Bank Id */
					bankid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Bank']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/bank-items': {
		/**
		 * Bank item list
		 * @description Return a list of bank items visible by the current User, according to visibility restriction set in user profile
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Bank item purchase affectation id */
					purchase_affectationid?: number
					/** @description Bank item sale affectation  id */
					sale_affectationid?: number
					/** @description Bank item bank id */
					bankid?: number
					/** @description Period of bank items */
					period?: components['schemas']['Period']
					/** @description Date minimum of bank items. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Date maximum of bank items. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Bank item state of bank reconciliation */
					matched?: string
					/** @description Bank item movement (in > 0, out < 0) */
					movement?: 'in' | 'out'
					/** @description Search param */
					search?: string
					/** @description Sort the response by the given field. */
					sort_by?: 'bank_itemid'
					order?: components['parameters']['orderParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['BankItemCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/bank-items/{bank_itemid}': {
		/**
		 * Bank Item detail
		 * @description Return a bank item by its speficied id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Bank item Id */
					bank_itemid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['BankItem']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/bank-items/{bank_itemid}/locked': {
		/**
		 * Lock / unlock bank item
		 * @description Update bank item locked state
		 */
		put: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					bank_itemid: number
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/**
						 * @description Locked state
						 * @example true
						 */
						locked?: boolean
					}
				}
			}
			responses: {
				/** @description No content */
				204: never
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				422: components['responses']['Validation']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/files/{doc_type}/{docid}': {
		/**
		 * Get the accounting file
		 * @description Return file content encoded in base64
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Document name */
					doc_type:
						| 'buy'
						| 'supplier-credit'
						| 'cash-deposit'
						| 'bank_item'
						| 'book_entry'
						| 'invoice'
						| 'advance'
						| 'credit'
						| 'quote'
						| 'corder'
						| 'delivery'
						| 'article'
						| 'bintray'
					/** @description Document Id */
					docid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['File']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/{doc_type}/{docid}/attachments': {
		/**
		 * List of attachments
		 * @description Get a list of all the document's attachments
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Document name */
					doc_type: 'buys' | 'quotes'
					/** @description Document Id */
					docid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['AttachmentCollection']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Add a new attachment
		 * @description Attach a new file to the given document
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Document name */
					doc_type: 'buys' | 'quotes'
					/** @description Document Id */
					docid: number
				}
			}
			/** @description Pass parameter as form-data. */
			requestBody: {
				content: {
					'multipart/form-data': {
						/**
						 * Format: binary
						 * @description The file to upload.
						 *
						 * Maximum size is 10MB and minimum size is 56B.
						 *
						 * Accepted file extensions are : pdf, gif, jpeg, png, tiff, txt, zip, rar, ods, odt, odp, odg, xls, xlsm, xslx doc, csv, ppt, pptx, docx.
						 */
						file: string
					}
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['Attachment']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/{doc_type}/{docid}/attachments/{fileid}': {
		/**
		 * Attachment detail
		 * @description Get a document's attachment details
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Document name */
					doc_type: 'buys' | 'quotes'
					/** @description Document Id */
					docid: number
					/** @description File Id */
					fileid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['SingleAttachment']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/analytics': {
		/** Analytic axis list */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Filter active / inactive analytics */
					enabled?: boolean
					/** @description Search param */
					search?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['AnalyticCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/analytics/{analyticid}': {
		/** Analytic axis detail */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Analytic Id */
					analyticid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Analytic']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/articles': {
		/** Article list */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Filter active / inactive articles */
					enabled?: boolean
					/** @description Search param */
					search?: string
					/** @description type of article */
					nature?: 'product' | 'service'
					/** @description Sell classification id */
					sale_classificationid?: number
					/** @description Purchase classification id */
					purchase_classificationid?: number
					/** @description Supplier id */
					supplierid?: number
					/** @description Filter articles by reference */
					reference?: string
					/** @description Sort the response by the given field, if not given the collection is sorted by `reference` ascendantly. */
					sort_by?: 'articleid'
					order?: components['parameters']['orderParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['ArticleCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Create a new article
		 * @description Create a new article with given data
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/** @description Article reference */
						reference: string
						/**
						 * @description Article type
						 * @enum {string}
						 */
						nature?: 'product' | 'service'
						/** @description Article designation */
						designation: string
						/**
						 * Format: float
						 * @description Article quantity
						 */
						quantity?: number
						/**
						 * Format: float
						 * @description Article weight
						 */
						weight?: number
						/** @description Article quantity unit */
						unit?: string
						/** @description Article sell classification id, only accepted when sell classifications are enabled */
						sale_classificationid?: number
						/**
						 * Format: float
						 * @description Article unit price (excluding or including vat according to ttc field value or defaults to current company configuration if ttc is not filled)
						 */
						unit_price?: number
						/**
						 * Format: float
						 * @description Article VAT rate
						 */
						vat_rate?: number
						/** @description Billing option (true is incl. taxes, false is excl. taxes and null is Company billing option) */
						ttc?: boolean
						/**
						 * Format: float
						 * @description Article purchase unit price, must be less than unit price vat excluded
						 */
						purchase_unit_price_vat_exclude?: number
						/** @description Article buy classification id */
						purchase_classificationid?: number
						/** @description Linked supplier Id */
						supplierid?: number
						/** @description Article reference from the supplier */
						supplier_reference?: string
						/** @description Stock management for the article */
						stock_management?: boolean
						/**
						 * Format: float
						 * @description Article stocked quantity
						 */
						stocked_quantity?: number
					}
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['Article']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/articles/{articleid}': {
		/** Article detail */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Article id */
					articleid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Article']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/users': {
		/** User list */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Filter active / inactive users */
					enabled?: boolean
					/** @description Search param */
					search?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['UserCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/users/{userid}': {
		/** User detail */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description User id */
					userid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['User']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/prospects': {
		/**
		 * Prospect list
		 * @description Return the prospect list of the specified or current user company
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Prospect’s creator ID */
					userid?: number
					/** @description Iso2 country code */
					country_iso2?: string
					/** @description Filter active / inactive prospects */
					enabled?: boolean
					/** @description Search param */
					search?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['ProspectCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Create a new prospect
		 * @description Create a new prospect with given data
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/** @description Prospect name, must be unique. */
						name: string
						/** @description Prospect activity number */
						activity_number?: string
						/** @description Prospect business Number (SIRET). */
						business_number?: string
						/** @description Prospect intra-community VAT number. */
						vat_number?: unknown
						/** @description Prospect address informations */
						address: {
							/** @description Address line 1 */
							addr?: string
							/** @description Address line 2 */
							addr2?: string
							/** @description Postcode */
							postcode: string
							/** @description Town */
							town: string
							/** @description Country ISO2 code */
							iso2: string
						}
						/** @description Prospect phone number */
						phone?: string
						/** @description Prospect mobile number */
						mobile?: string
						/** @description Prospect fax number */
						fax?: string
						/** @description Prospect website URL */
						website?: string
						/** @description Comments on this prospect */
						comment?: string
					}
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['Prospect']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/prospects/{prospectid}': {
		/** Prospect detail */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Prospect Id */
					prospectid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Prospect']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/sale-orders': {
		/**
		 * Sale order list
		 * @description Return a list of sale orders visible by the current User, according to visibility restriction set in user profile
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Order's creator id */
					userid?: number
					/** @description Client id */
					clientid?: number
					/**
					 * @description ISO currency code
					 * @example EUR
					 */
					currency?: string
					/** @description Payment method id */
					paytypeid?: number
					/** @description Analytic axis id */
					analyticid?: number
					status?:
						| 'filled'
						| 'create'
						| 'sent'
						| 'reject'
						| 'accept'
						| 'wait'
						| 'delivery'
						| 'invoice'
						| 'close'
						| 'noinvoice'
						| 'nopack'
						| 'recovery'
						| 'all'
					/** @description Minimun amount (require amount_max parameter) */
					amount_min?: number
					/** @description Maximum amount (require amount_min parameter) */
					amount_max?: number
					/** @description Set vat type to filter with amount_min and amount_max parameter. */
					amount_type?: components['schemas']['AmountType']
					/** @description Orders period */
					period?: components['schemas']['Period']
					/** @description Orders min date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Orders max date. Must be used with date_min and period set to custom. */
					date_max?: string
					/** @description Search parameter */
					search?: string
					/** @description Filter active / inactive client orders */
					enabled?: boolean
					document_number?: components['parameters']['documentNumberParameter']
					/** @description Sort the response by the given field. */
					sort_by?: 'orderid'
					order?: components['parameters']['orderParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['SaleOrderCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Create a new sale order
		 * @description Create a new sale order with given data. Totals, margins, included VAT fields are automatically calculated.
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/**
						 * @description External Document number, must be unique
						 * @example EXT001
						 */
						external_document_number: string
						/**
						 * Format: date
						 * @description Document date
						 * @example 2019-10-10
						 */
						documentdate: string
						/**
						 * @description The client's id to attach the sale order to
						 * @example 9876
						 */
						clientid: number
						/**
						 * @description The contact client's id to adress the sale order to
						 * @example 8568
						 */
						contactid?: number
						/**
						 * @description object on the document
						 * @example Abonnement Logiciel Gestion Commerciale
						 */
						object?: string
						/** @description Sale order condition informations */
						term?: {
							/**
							 * @description Penalty rate, prohibited if nopenalty is true
							 * @example 3
							 */
							penalty?: number
							/**
							 * @description Use legal mention about penalty rate
							 * @example false
							 */
							nopenalty?: boolean
							/**
							 * @description Use legal collection cost
							 * @example false
							 */
							recovery_indemnity?: boolean
							/**
							 * @description Discount rate, prohibited if no_discount_term is true
							 * @example 0
							 */
							discount_term?: number
							/**
							 * @description No relevant discount rate
							 * @example false
							 */
							no_discount_term?: boolean
							/**
							 * @description Payment term identifier, client specific term.paytermid will be used if the field is not filled
							 * @example 3
							 */
							paytermid: number
							/**
							 * Format: date
							 * @description Payment due date, required if paytermid is 18 (Saisir une date), must be after or equal documentdate
							 * @example 2019-10-10
							 */
							duedate?: string
							/**
							 * @description Payment delay, required if paytermid is 16 (Autre condition), must be after or equal to documentdate
							 * @example 20
							 */
							paydelay?: number
							/**
							 * @description Payment endmonth, required if paytermid is 16 (Autre condition)
							 * @example true
							 */
							endmonth?: boolean
							/**
							 * @description Payment day, required if paytermid is 16 (Autre condition)
							 * @example 25
							 */
							payday?: number
							/**
							 * @description Payment type identifier
							 * @example 3
							 */
							paytypeid?: number
						}
						/**
						 * @description Comments on the sale order with html
						 * @example Titulaire du compte : Hingis160 SARL<br />
						 * Domiciliation du compte : Boulogne<br />
						 * IBAN : FR7612345678901234567890123
						 */
						comment?: string
						/**
						 * @description Analytic axis id, this field is accepted only when analytic option is enabled, required if sale order is checked in analytic configuration.
						 * @example 12345
						 */
						analyticid?: number
						/**
						 * @description Withdrawal period
						 * @example false
						 */
						retract?: boolean
						/**
						 * Format: date
						 * @description Delivery date of the document
						 * @example 2019-10-10
						 */
						delivery_date?: string
						global_rebate?: number | string
						/**
						 * @description Indicate whether to include sale general conditions in the document PDF or not
						 * @default false
						 * @example true
						 */
						include_sale_general_conditions?: boolean
						/** @description Sale order items */
						items?: (
							| (components['schemas']['ItemWithoutArticleId'] &
									Record<string, never> & {
										/**
										 * Format: float
										 * @description Item purchase unit price vat excluded, must be less than unit price vat excluded
										 */
										purchase_unit_price_vat_exclude?: number | null
										/**
										 * @description Item sale classification id, only accepted when sale classification are enabled, required if sale order is checked in classifications configuration.
										 * @example 45732
										 */
										sale_classificationid?: number
									})
							| (components['schemas']['ItemWithArticleId'] &
									Record<string, never> & {
										/**
										 * Format: float
										 * @description Override article purchase unit price, must be less than unit price vat excluded
										 */
										purchase_unit_price_vat_exclude?: number | null
										/**
										 * @description Override article sale classification id, only accepted when sale classification are enabled, required if sale order is checked in classifications configuration.
										 * @example 45732
										 */
										sale_classificationid?: number
									})
						)[]
					}
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['SaleOrder']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/sale-orders/{orderid}': {
		/**
		 * Sale order detail
		 * @description Return a sale order by its speficied id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Order id */
					orderid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['SaleOrder']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/sale-orders/{orderid}/invoice': {
		/**
		 * Invoice a sale order
		 * @description Create a new invoice from the given sale order.
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Order id */
					orderid: number
				}
			}
			/** @description No parameters are needed for this endpoint. */
			requestBody?: {
				content: {
					'application/json': Record<string, never>
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['Invoice']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/quotes': {
		/**
		 * Quote list
		 * @description Return a list of quotes visible by the current User, according to visibility restriction set in user profile
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Quote's creator id */
					userid?: number
					/** @description Quote's client id. Can't be used with prospectid or organization set to PROSPECT. */
					clientid?: number
					/** @description Quote's prospect id. Can't be used with clientid or organization set to CLIENT. */
					prospectid?: number
					/** @description Organization's type. */
					organization?: 'CLIENT' | 'PROSPECT'
					/**
					 * @description ISO currency code
					 * @example EUR
					 */
					currency?: string
					/** @description Quote's status */
					status?:
						| 'filled'
						| 'create'
						| 'sent'
						| 'reject'
						| 'wait'
						| 'accept'
						| 'corder'
						| 'delivery'
						| 'invoice'
						| 'close'
						| 'noinvoice'
						| 'recovery'
						| 'all'
					/** @description Payment method id */
					paytypeid?: number
					/** @description Analytic axis id */
					analyticid?: number
					/** @description Minimun amount (require amount_max parameter) */
					amount_min?: number
					/** @description Maximum amount (require amount_min parameter) */
					amount_max?: number
					/** @description Set vat type to filter with amount_min and amount_max parameter. */
					amount_type?: components['schemas']['AmountType']
					/** @description Filter active / inactive quotes */
					enabled?: boolean
					/** @description Search parameter */
					search?: string
					/** @description Quotes period */
					period?: components['schemas']['Period']
					/** @description Quotes min date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Quotes max date. Must be uses with date_min and period set to custom. */
					date_max?: string
					/** @description Sort the response by the given field, if not given the collection is sorted by `document_date` and `document_number` descendantly. */
					sort_by?: 'quoteid'
					order?: components['parameters']['orderParameter']
					document_number?: components['parameters']['documentNumberParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['QuoteCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Create a new quote
		 * @description Create a new quote with given data. Totals, margins, included VAT fields are automatically calculated.
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/**
						 * @description External Document number, must be unique
						 * @example EXT001
						 */
						external_document_number: string
						/**
						 * Format: date
						 * @description Document date
						 * @example 2019-10-10
						 */
						documentdate: string
						/**
						 * @description The client's id to attach the quote to (required if prospectid is not used)
						 * @example 9876
						 */
						clientid: number
						/**
						 * @description The prospect's id to attach the quote to (required if clientid is not used)
						 * @example 5632
						 */
						prospectid?: number
						/**
						 * @description The contact client's id to adress the quote to
						 * @example 8568
						 */
						contactid?: number
						/**
						 * @description object on the document
						 * @example Abonnement Logiciel Gestion Commerciale
						 */
						object?: string
						/**
						 * @description Validity duration of the document in days
						 * @example 3
						 */
						validity?: number
						/** @description Quote condition informations */
						term?: {
							/**
							 * @description Penalty rate, prohibited if nopenalty is true
							 * @example 3
							 */
							penalty?: number
							/**
							 * @description Use legal mention about penalty rate
							 * @example false
							 */
							nopenalty?: boolean
							/**
							 * @description Use legal collection cost
							 * @example false
							 */
							recovery_indemnity?: boolean
							/**
							 * @description Discount rate, prohibited if no_discount_term is true
							 * @example 0
							 */
							discount_term?: number
							/**
							 * @description No relevant discount rate
							 * @example false
							 */
							no_discount_term?: boolean
							/**
							 * @description Payment term identifier, client specific term.paytermid will be used if the field is not filled
							 * @example 3
							 */
							paytermid: number
							/**
							 * Format: date
							 * @description Payment due date, required if paytermid is 18 (Saisir une date), must be after or equal documentdate
							 * @example 2019-10-10
							 */
							duedate?: string
							/**
							 * @description Payment delay, required if paytermid is 16 (Autre condition), must be after or equal to documentdate
							 * @example 20
							 */
							paydelay?: number
							/**
							 * @description Payment endmonth, required if paytermid is 16 (Autre condition)
							 * @example true
							 */
							endmonth?: boolean
							/**
							 * @description Payment day, required if paytermid is 16 (Autre condition)
							 * @example 25
							 */
							payday?: number
							/**
							 * @description Payment type identifier
							 * @example 3
							 */
							paytypeid?: number
						}
						/**
						 * @description Comments on the quote with html
						 * @example Titulaire du compte : Hingis160 SARL<br />
						 * Domiciliation du compte : Boulogne<br />
						 * IBAN : FR7612345678901234567890123
						 */
						comment?: string
						/**
						 * @description Analytic axis id, this field is accepted only when analytic option is enabled, required if quote is checked in analytic configuration.
						 * @example 12345
						 */
						analyticid?: number
						/**
						 * Format: date
						 * @description Delivery date of the document
						 * @example 2019-10-10
						 */
						delivery_date?: string
						global_rebate?: number | string
						/**
						 * @description Indicate whether to include sale general conditions in the document PDF or not
						 * @default false
						 * @example true
						 */
						include_sale_general_conditions?: boolean
						/** @description Quote items */
						items?: (
							| (components['schemas']['ItemWithoutArticleId'] &
									Record<string, never> & {
										/**
										 * Format: float
										 * @description Item purchase unit price vat excluded, must be less than unit price vat excluded
										 */
										purchase_unit_price_vat_exclude?: number | null
										/**
										 * @description Item sale classification id, only accepted when sale classification are enabled, required if quote is checked in classifications configuration.
										 * @example 45732
										 */
										sale_classificationid?: number
									})
							| (components['schemas']['ItemWithArticleId'] &
									Record<string, never> & {
										/**
										 * Format: float
										 * @description Override article purchase unit price, must be less than unit price vat excluded
										 */
										purchase_unit_price_vat_exclude?: number | null
										/**
										 * @description Override article sale classification id, only accepted when sale classification are enabled, required if quote is checked in classifications configuration.
										 * @example 45732
										 */
										sale_classificationid?: number
									})
						)[]
					}
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['Quote']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/quotes/{quoteid}': {
		/**
		 * Quote detail
		 * @description Return a quote by its speficied id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Quote id */
					quoteid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Quote']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/quotes/{quoteid}/invoice': {
		/**
		 * Invoice a quote
		 * @description Create a new invoice from the given quote.
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Quote id */
					quoteid: number
				}
			}
			/** @description No parameters are needed for this endpoint. */
			requestBody?: {
				content: {
					'application/json': Record<string, never>
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['Invoice']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/quotes/{quoteid}/send': {
		/**
		 * Send Quote by email
		 * @description Send an email with a link to the quote
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Quote Id */
					quoteid: number
				}
			}
			requestBody: components['requestBodies']['QuoteSendEmail']
			responses: {
				/** @description No content */
				204: never
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				405: components['responses']['MethodNotAllowed']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/deliveries/{deliveryid}': {
		/**
		 * Delivery detail
		 * @description Return a delivery by its speficied id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Delivery id */
					deliveryid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Delivery']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/accounts': {
		/**
		 * Accounting classification list
		 * @description Return a list of accounting classification visible by the current user.
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Search param */
					search?: string
					/** @description Sort the response by the given field. */
					sort_by?: 'accountid'
					/**
					 * @description Precise the sort direction. If given, the `sort_by` parameter is required. <br />
					 * Sort order:
					 *  * `asc` - Ascending
					 *  * `desc` - Descending
					 */
					order?: 'asc' | 'desc'
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['AccountCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Create a new accounting classification
		 * @description Create a new accounting classification with given data
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/**
						 * @description Account code
						 * @example 6061
						 */
						code: string
						/**
						 * @description Account label
						 * @example Fournitures non stockable
						 */
						label: string
					}
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['Account']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/accounts/{accountid}': {
		/**
		 * Accounting account detail
		 * @description Return an accounting account by its specified Id.
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Accounting account Id */
					accountid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Account']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/myunisoft/connect': {
		/**
		 * Connect MyUnisoft application
		 * @description Connect MyUnisoft application in company with api key
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/**
						 * @description MyUnisoft api key
						 * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYXBpIiwibSI6MjAsInQiOjgsInMiOjI0NCwiaWF0IjoxNjEyOTY5MjI2fQ.eUFSUA-MpdwqL36x1F1mf83uimD3O27rRYfjwMHiA
						 */
						api_key: string
					}
				}
			}
			responses: {
				/** @description No Content */
				204: never
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/paytypes': {
		/**
		 * Payment types
		 * @description Return a list of payment types
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['PaytypeCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/paytypes/{paytypeid}': {
		/**
		 * Payment type details
		 * @description Return a  payment type by its specified id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Payment type id */
					paytypeid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Paytype']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/unit-codes': {
		/**
		 * Unit codes
		 * @description Return a list of units codes, used in various endpoints
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['UnitCodeCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/unit-codes/{unitcodeid}': {
		/**
		 * Unit code details
		 * @description Return a unit code by its specified Id.
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Unit code id */
					unitcodeid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['UnitCode']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/vat-rates': {
		/**
		 * List of all Vat rates
		 * @description Return a list of vat rates visible by the current user.
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['vatCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/vat-rates/{vatrateid}': {
		/**
		 * Vat rate details
		 * @description Return a vat rate by its specified Id.
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Var rate Id */
					vatrateid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['vat']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/payterms': {
		/**
		 * Payment terms
		 * @description Return a list of payment terms.
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['PayTermCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/payterms/{paytermid}': {
		/**
		 * Payment Term detail
		 * @description Return a payment term by its specified Id.
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Payment term Id */
					paytermid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['payterm']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/events': {
		/**
		 * List element's events
		 * @description Return a list of events visible by the current user.
		 */
		get: {
			parameters: {
				query?: {
					/** @description Event's creator ID */
					userid?: number
					/** @description Event action */
					action?:
						| 'delete'
						| 'filled'
						| 'update'
						| 'create'
						| 'match'
						| 'accept'
						| 'reject'
						| 'invoice'
					/** @description Element type where the event occured */
					element_type?:
						| 'invoice'
						| 'advance'
						| 'credit'
						| 'payment'
						| 'quote'
						| 'corder'
					per_page?: components['parameters']['perPageParameter']
					/** @description Events period */
					period?: components['schemas']['Period']
					/** @description Events min date. Must be used with date_max and period set to custom. */
					date_min?: string
					/** @description Events max date. Must be uses with date_min and period set to custom. */
					date_max?: string
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['EventCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/events/{eventid}': {
		/**
		 * Event details
		 * @description Return an event by its specified Id.
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Event Id */
					eventid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Event']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/suppliers': {
		/**
		 * Supplier list
		 * @description Return the suppliers list of the current user company
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Iso2 country code */
					country_iso2?: string
					/** @description Filter active / inactive suppliers */
					enabled?: boolean
					/** @description Search param */
					search?: string
					/**
					 * @description Filter suppliers with supplier code identifier
					 * @example F1
					 */
					code?: string
					/** @description Sort the response by the given field, if not given the collection is sorted by `name` ascendantly. */
					sort_by?: 'supplierid'
					order?: components['parameters']['orderParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['SupplierCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/suppliers/{supplierid}': {
		/**
		 * Supplier detail
		 * @description Return a supplier by its speficied id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Supplier Id */
					supplierid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Supplier']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/cashes': {
		/**
		 * Cashes list
		 * @description Return a list of cashes accessible by the current user.
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
				}
				path: {
					companyid: components['parameters']['companyParameter']
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['CashCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/cashes/{cashid}': {
		/**
		 * Cash detail
		 * @description Return a cash by its specified Id.
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Cash Id */
					cashid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['Cash']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/cashes/{cashid}/entries': {
		/**
		 * Cash entries
		 * @description Return cash entries for the given cash.
		 */
		get: {
			parameters: {
				query?: {
					per_page?: components['parameters']['perPageParameter']
					/** @description Cash entries period */
					period?: components['schemas']['Period']
				}
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Cash Id */
					cashid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['CashEntryCollection']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
		/**
		 * Create a new cash entry
		 * @description Create a new cash entry for the given cash
		 *
		 * You have to make sure that your cash balance is always positive. Otherwise, a 400 HTTP reponse code will be returned.
		 *
		 * The formula to calculate the cash balance is :
		 *
		 *   The current cash balance + the entered amount for cash paytype (in `sales.paytypes`) - the sum of the buys total vat included - the deposit amount in bank for the cash paytype (`paytypes.deposits`) + `others.cash_contribution.amount` - `others.cash_disbursement.amount` + `others.cash_difference`.
		 */
		post: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Cash Id */
					cashid: number
				}
			}
			/** @description Pass parameter as application/json in raw. */
			requestBody: {
				content: {
					'application/json': {
						/**
						 * Format: date
						 * @description Cash entry date, it must be after or equal to the cash start date
						 * @example 2022-03-15
						 */
						date: string
						/** @description Sales related entries */
						sales?: {
							/** @description Turnover related entries */
							turnover?: {
								/** @description Sale classification entries, the `code`, `vat_rate` and `total_vat_include` fields must be present together */
								classifications?: {
									/**
									 * Format: integer
									 * @description Sale classification Id
									 * @example 25
									 */
									sale_classificationid?: number
									/**
									 * Format: float
									 * @description Vat rate
									 * @example 2.1
									 */
									vat_rate?: number
									/**
									 * Format: float
									 * @description Total amount of the entry including vat
									 * @example 432
									 */
									total_vat_include?: number
								}[]
								/** @description Payments entries. */
								payments?: {
									/** @description Payments on invoices, you need the sale_invoice scope in order to create payments on invoices. */
									invoices?: {
										/**
										 * @description The invoice to pay Id, the invoice should not be already paid.
										 * @example 66
										 */
										id: string
										/**
										 * Format: float
										 * @description Payment amount (cannot be greater than invoice left to pay)
										 * @example 537.71
										 */
										amount: number
									}[]
									/** @description Payments on advances, you need the sale_advance scope in order to create payments on advances. */
									advances?: {
										/**
										 * @description The advance to pay Id, the advance should not be already paid.
										 * @example 66
										 */
										id: string
										/**
										 * Format: float
										 * @description Payment amount (partiel payment is not allowed on advance)
										 * @example 537.71
										 */
										amount: number
									}[]
								}
							}
							/** @description Paytypes entries, the `id` and `amount` fields must be present together */
							paytypes?: {
								/**
								 * @description Paytype Id, it must be unique in the array
								 * @example 1109
								 */
								id?: number
								/**
								 * Format: float
								 * @description The paytype entry amount
								 * @example 150.25
								 */
								amount?: number
							}[]
						}
						/** @description Buys entries. */
						buys?: {
							/**
							 * @description The supplier's id to attach the buy to.
							 * @example 9876
							 */
							supplierid: number
							/**
							 * Format: float
							 * @description The buy total including vat.
							 * @example 432
							 */
							total_vat_include: number
							/**
							 * @description External document number written on the document.
							 * @example EXT0001
							 */
							external_document_number?: string
							/**
							 * @description Analytic axis id, this field is accepted only when analytic option is enabled, required if buy is checked in analytic configuration.
							 * @example 12345
							 */
							analyticid?: number
							/**
							 * @description Buy items, the total of all `total_vat_exclude` must be less than or equal `total_vat_include` and must not be equal to 0.
							 *
							 * The buy total vat is automatically calculated, the maximum accepted vat rate is 30%.
							 *
							 * Example : if `total_vat_include` is equal to 100 and the sum of all `items.*.total_vat_exclude` is equal to 70, the vat rate here is 42.86% which is not accepted, a 400 HTTP response code will be returned.
							 */
							items: {
								/**
								 * @description Purchase classification id.
								 * @example 705
								 */
								classificationid?: number
								/**
								 * Format: float
								 * @description Item total excluding vat.
								 * @example 25.23
								 */
								total_vat_exclude: number
							}[]
						}[]
						/** @description Paytypes deposits */
						paytypes_deposits?: {
							/**
							 * @description Paytype Id, it must be unique in the array
							 * @example 1109
							 */
							id?: number
							/**
							 * Format: float
							 * @description The paytype deposit amount, the amount must be less than or equal the paytype balance + the entered amount for the same paytype in the `sales.paytypes` array.
							 * @example 150.25
							 */
							amount?: number
							/**
							 * Format: float
							 * @description The paytype deposit cost, required if the paytype has fees
							 * @example 10
							 */
							cost?: number
							/**
							 * Format: float
							 * @description The paytype deposit cost vat, required if the paytype has fees
							 * @example 5
							 */
							cost_vat?: number
						}[]
						others?: {
							/** @description Cash contribution (cash money injected into the cash register) */
							cash_contribution?: {
								/**
								 * Format: float
								 * @description Cash contribution amount
								 * @example 25.33
								 */
								amount?: number
								reason?: components['schemas']['Reason']
								/** @description Cash contribution comment */
								comment?: string
							}
							/**
							 * Format: float
							 * @description Cash difference (difference between the theoretical cash sale and the actual cash sale)
							 * @example 20
							 */
							cash_difference?: number
							/** @description Cash disbursement (cash output apart buys) */
							cash_disbursement?: {
								/**
								 * Format: float
								 * @description Cash disbursement amount
								 * @example 25.33
								 */
								amount?: number
								/**
								 * @description Purchase affectation id
								 * @example 8056
								 */
								affectationid?: number | null
							}
						}
					}
				}
			}
			responses: {
				/** @description Created */
				201: {
					content: {
						'application/json': components['schemas']['CashEntry']
					}
				}
				400: components['responses']['BadRequest']
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				424: components['responses']['Dependency']
				/** @description Server error */
				500: never
			}
		}
	}
	'/api/v1/companies/{companyid}/cashes/{cashid}/entries/{entryid}': {
		/**
		 * Cash entry detail
		 * @description Return a cash entry by its speficied Id
		 */
		get: {
			parameters: {
				path: {
					companyid: components['parameters']['companyParameter']
					/** @description Cash Id */
					cashid: number
					/** @description Cash entry Id */
					entryid: number
				}
			}
			responses: {
				/** @description Request successfull */
				200: {
					content: {
						'application/json': components['schemas']['CashEntry']
					}
				}
				401: components['responses']['Unauthorized']
				403: components['responses']['Forbidden']
				404: components['responses']['NotFound']
				424: components['responses']['Dependency']
				429: components['responses']['ThrottleRequests']
				/** @description Server error */
				500: never
			}
		}
	}
}

export type webhooks = Record<string, never>

export interface components {
	schemas: {
		Login: {
			/** @description The public key given in the app and always displayable. */
			public_key: string
			/** @description The secret key given when you create your API credentials in the app. It's only displayable once. In case you didn't saved it, you can regenerate it. */
			secret_key: string
		}
		ClientCollection: {
			data?: components['schemas']['Client'][]
		} & components['schemas']['Pagination']
		SupplierCollection: {
			data?: components['schemas']['Supplier'][]
		} & components['schemas']['Pagination']
		AccountCollection: {
			data?: components['schemas']['Account'][]
		} & components['schemas']['Pagination']
		PayTermCollection: {
			data?: components['schemas']['payterm'][]
		} & components['schemas']['Pagination']
		/** @description Accounting account */
		Account: {
			/**
			 * @description Object unique identifier
			 * @example 45
			 */
			accountid?: number
			/**
			 * @description Account number
			 * @example 6061
			 */
			code?: string
			/**
			 * @description Account label
			 * @example Fournitures non stockables
			 */
			label?: string
		} | null
		/** @description VAT */
		vat: {
			/**
			 * @description Object unique identifier
			 * @example 13
			 */
			vatid?: number
			/**
			 * Format: float
			 * @description VAT rate
			 * @example 10
			 */
			rate?: number
			account?: components['schemas']['Account']
		} | null
		vatCollection: {
			data?: components['schemas']['vat'][]
		} & components['schemas']['Pagination']
		Client: {
			/**
			 * @description Object unique identifier
			 * @example 9876
			 */
			clientid?: number
			/**
			 * @description Client’s creator ID
			 * @example 3780
			 */
			userid?: number
			/**
			 * @description Client code identifier
			 * @example C00123
			 */
			code?: string
			/**
			 * @description Client civility
			 * @example M.
			 */
			civility?: string
			/**
			 * @description Client name
			 * @example Triiptic
			 */
			name?: string
			/**
			 * @description Client type
			 * @example Professionnel
			 * @enum {string}
			 */
			type?: 'Particulier' | 'Professionnel' | 'Administration publique'
			/**
			 * @description Client's company legal form
			 * @example SAS
			 */
			legalform?: string
			/**
			 * @description Business Number (SIRET)
			 * @example 123 456 789 12345
			 */
			business_number?: string
			/**
			 * @description Main activity code (APE, NAF)
			 * @example 1234A
			 */
			activity_number?: string
			/**
			 * @description Intra-community VAT number<br>'N/C' if Not Concerned, Not Known or Not Communicated
			 * @example FR20123456789
			 */
			vat_number?: string
			/**
			 * @description Client's company registration number (RCS, RM)
			 * @example RCS PARIS 12345678912345
			 */
			immat_number?: string
			bank_information?: components['schemas']['BankInformation']
			address?: components['schemas']['Address']
			delivery_address?: components['schemas']['DeliveryAddress']
			/**
			 * @description Phone number
			 * @example 01 46 72 50 04
			 */
			phone?: string
			/**
			 * @description Cell phone number
			 * @example +33600000000
			 */
			mobile?: string
			/**
			 * @description Fax number
			 * @example 900000000
			 */
			fax?: string
			/**
			 * @description Website
			 * @example https://www.triiptic.fr
			 */
			website?: string
			/**
			 * Format: float
			 * @description Amount of outstanding guarantee
			 * @example 4000
			 */
			safe_amount?: number
			term?:
				| ({
						/**
						 * @description Client's quote period of validity (in days)
						 * @example 0
						 */
						validity?: number
						payterm?: components['schemas']['payterm'] | null
						paytype?: components['schemas']['Paytype'] | null
						/**
						 * @description Client's default vat rate
						 * @example 20
						 */
						var_rate?: number
						/**
						 * @description Client's default rebate in percent
						 * @example 12
						 */
						rebate_percent?: number
						analytic?: components['schemas']['Analytic']
						/** @description Client's default vat exoneration reason code, refer to [vat exoneration reasons codes](#section/VAT-exoneration-reasons) */
						vat_exoneration?: unknown
						/**
						 * @description Client's default custom vat exoneration reason
						 * @example My custom vat exoneration reason
						 */
						vat_exoneration_other_reason?: string
				  } & components['schemas']['Term'])
				| null
			/**
			 * @description Billing option (true is incl. taxes, false is excl. taxes and null is Company billing option)
			 * @example false
			 */
			ttc?: boolean | null
			/**
			 * @description Comments on this client
			 * @example Ce client est génial
			 */
			comment?: string
			/** @description Determines if the client is active */
			enabled?: boolean
			custom_fields?: components['schemas']['CustomFieldCollection']
		}
		Supplier: {
			/**
			 * @description Object unique identifier
			 * @example 9876
			 */
			supplierid?: number
			/**
			 * @description Supplier's creator ID
			 * @example 3780
			 */
			userid?: number
			/**
			 * @description Supplier code identifier
			 * @example F160
			 */
			code?: string
			/**
			 * @description Supplier name
			 * @example Triiptic
			 */
			name?: string
			/**
			 * @description Supplier's company legal form
			 * @example SAS
			 */
			legalform?: string
			/**
			 * @description Business Number (SIRET)
			 * @example 123 456 789 12345
			 */
			business_number?: string
			/**
			 * @description Main activity code (APE, NAF)
			 * @example 1234A
			 */
			activity_number?: string
			/**
			 * @description Intra-community VAT number<br>Set the 'N/C' if Not Concerned, Not Known or Not Communicated
			 * @example FR20123456789
			 */
			vat_number?: string
			bank_information?: components['schemas']['SupplierBankInformation']
			address?: components['schemas']['Address']
			/**
			 * @description Phone number
			 * @example 01 46 72 50 04
			 */
			phone?: string
			/**
			 * @description Cell phone number
			 * @example +33600000000
			 */
			mobile?: string
			/**
			 * @description Fax number
			 * @example 900000000
			 */
			fax?: string
			/**
			 * @description Website
			 * @example https://www.triiptic.fr
			 */
			website?: string
			/**
			 * @description Comments on this supplier
			 * @example Ce fournisseur est génial
			 */
			comment?: string
			/** @description Determines if the supplier is active */
			enabled?: boolean
			custom_fields?: components['schemas']['CustomFieldCollection']
		}
		/** @description Affiliated site informations */
		HomeSite: {
			/**
			 * @description Affiliated site Id
			 * @example 34
			 */
			home_siteid?: number
			/**
			 * @description Affiliated site name
			 * @example Paris Clisson
			 */
			home_site?: string
		}
		/** @description Accounting informations */
		Accounting: {
			/**
			 * Format: date MM-DD
			 * @description Accounting period beginning date
			 * @example 01-01
			 */
			beginning_date?: string
			/**
			 * Format: date MM-DD
			 * @description Accounting period ending date
			 * @example 12-31
			 */
			ending_date?: string
		}
		/** @description Address informations */
		Address: {
			/**
			 * @description Address line 1
			 * @example 176 avenue Joseph Louis Lambot
			 */
			addr?: string
			/**
			 * @description Address line 2
			 * @example Etage 2
			 */
			addr2?: string
			/**
			 * @description Postcode
			 * @example 83130
			 */
			postcode?: string
			/**
			 * @description Town
			 * @example La Garde
			 */
			town?: string
			country?: components['schemas']['Country']
		}
		/**
		 * @description Delivery Address informations
		 * @example {
		 *   "addr": "129 rue Servient",
		 *   "addr2": "Etage 15",
		 *   "postcode": "69003",
		 *   "town": "Lyon",
		 *   "country": {
		 *     "label": "France",
		 *     "iso2": "FR"
		 *   }
		 * }
		 */
		DeliveryAddress: components['schemas']['Address']
		/** @description Country informations */
		Country: {
			/**
			 * @description Country name
			 * @example France
			 */
			label?: string
			/**
			 * @description Country ISO2 code
			 * @example FR
			 */
			iso2?: string
		}
		/** @description Bank informations */
		BankInformation: {
			/**
			 * @description Bank name
			 * @example Banque Populaire
			 */
			bank_name?: string
			/**
			 * @description Bank account details
			 * @example 12345 6789 012345678901 34
			 */
			bank_account_detail?: string
			/**
			 * @description International Bank Account Number
			 * @example FR00 1234 5678 9012 3456 7890 134
			 */
			iban?: string
			/**
			 * @description Bank Identifier Code (BIC, SWIFT)
			 * @example ABCDEFGH
			 */
			bank_identification_code?: string
		}
		/** @description Bank informations */
		SupplierBankInformation: {
			/**
			 * @description Bank account details
			 * @example 12345 6789 012345678901 34
			 */
			bank_account_detail?: string
			/**
			 * @description International Bank Account Number
			 * @example FR00 1234 5678 9012 3456 7890 134
			 */
			iban?: string
			/**
			 * @description Bank Identifier Code (BIC, SWIFT)
			 * @example ABCDEFGH
			 */
			bank_identification_code?: string
		}
		/** @description Company default currency */
		DefaultCurrency: {
			/**
			 * @description Iso currency code
			 * @example EUR
			 */
			code?: string
			/**
			 * Format: float
			 * @description Conversion rate with the "EUR" currency
			 * @example 1
			 */
			conversion?: number
			/**
			 * @description Currency symbol
			 * @example €
			 */
			symbol?: string
		}
		/** @description Document currency */
		DocumentCurrency: {
			/**
			 * @description Iso currency code
			 * @example USD
			 */
			code?: string
			/**
			 * Format: float
			 * @description Conversion rate with the "EUR" currency
			 * @example 1,10
			 */
			conversion?: number
			/**
			 * @description currency symbol
			 * @example $
			 */
			symbol?: string
		} | null
		/** @description Document retention information */
		Retention: {
			/**
			 * Format: float
			 * @description Retention percent
			 * @example 5
			 */
			percent?: number
			/**
			 * @description Retention amount
			 * @example 1.8
			 */
			amount?: number
			/**
			 * @description Retention amount in currency
			 * @example 2.1
			 */
			currency_amount?: number
			/**
			 * @description Retention Date
			 * @example 2020-12-19
			 */
			date?: number
		} | null
		AnalyticCollection: {
			data?: components['schemas']['Analytic'][]
		} & components['schemas']['Pagination']
		/** @description analytic axis of document */
		Analytic: {
			/**
			 * @description Analytical axis id
			 * @example 12345
			 */
			id?: number
			/**
			 * @description Analytical axis code identifier
			 * @example ANA3
			 */
			code?: string
			/**
			 * @description Analytical axis label
			 * @example Axe analytique 3
			 */
			label?: string
			/**
			 * @description Determines if analytical axis is active
			 * @example false
			 */
			enabled?: boolean
		} | null
		ArticleCollection: {
			data?: components['schemas']['Article'][]
		} & components['schemas']['Pagination']
		/** @description Article of catalog */
		Article: {
			/**
			 * @description Object unique identifier
			 * @example 12345
			 */
			articleid?: number
			/**
			 * @description Document’s creator ID
			 * @example 3780
			 */
			userid?: string
			/**
			 * @description Article reference with html
			 * @example SPLIT
			 */
			reference?: string
			/**
			 * @description Article reference without html
			 * @example SPLIT
			 */
			reference_clean?: string
			/**
			 * @description Article Type
			 * @enum {string|null}
			 */
			nature?: 'product' | 'service' | null
			/** @description Item sell classification information */
			sale_classification?: {
				/**
				 * @description Classification id
				 * @example 45732
				 */
				id?: number
				/**
				 * @description Classification code
				 * @example 4
				 */
				code?: string
				/**
				 * @description Classification label
				 * @example Vente de marchandise
				 */
				label?: string
			} | null
			/**
			 * @description Article designation with html
			 * @example Banana Split <br />
			 * Pour une durée de 12 mois
			 */
			designation?: string
			/**
			 * @description Article designation without html
			 * @example Banana Split
			 * Pour une durée de 12 mois
			 */
			designation_clean?: string
			/**
			 * Format: float
			 * @description Article quantity
			 * @example 12
			 */
			quantity?: number
			/**
			 * Format: float
			 * @description Item weight
			 * @example 152.123
			 */
			weight?: number | null
			/**
			 * @description Quantity unit
			 * @example M
			 */
			unit?: string | null
			/**
			 * Format: float
			 * @description Article unit price excluding vat
			 * @example 30
			 */
			unit_price_vat_exclude?: number
			/**
			 * Format: float
			 * @description Article unit price including vat
			 * @example 36
			 */
			unit_price_vat_include?: number
			/**
			 * Format: float
			 * @description Article VAT rate
			 * @example 20
			 */
			vat?: number
			/**
			 * @description Billing option (true is incl. taxes, false is excl. taxes and null is Company billing option)
			 * @example false
			 */
			ttc?: boolean | null
			/** @description Item purchase classification information */
			purchase_classification?: {
				/**
				 * @description Classification id
				 * @example 45732
				 */
				id?: number
				/**
				 * @description Classification code
				 * @example 4
				 */
				code?: string
				/**
				 * @description Classification label
				 * @example Achat de marchandise
				 */
				label?: string
			} | null
			/** @description Sale margin information */
			margin?: {
				/**
				 * Format: float
				 * @description Purchase unit price
				 * @example 16
				 */
				purchase_unit_price_vat_exclude?: number
				/**
				 * Format: float
				 * @description Margin coefficient
				 * @example 3.6
				 */
				coefficient?: number
				/**
				 * Format: float
				 * @description Margin percent
				 * @example 87.5
				 */
				margin_percent?: number
				/**
				 * Format: float
				 * @description Markup percent
				 * @example 46.67
				 */
				markup_percent?: number
				/**
				 * Format: float
				 * @description Margin amount
				 * @example 20
				 */
				amount?: number
			} | null
			supplier?: components['schemas']['LinkedSupplier']
			/**
			 * @description Article reference from the supplier with html
			 * @example SPLIT
			 */
			supplier_reference?: string | null
			/**
			 * @description Article reference from the supplier without html
			 * @example SPLIT
			 */
			supplier_reference_clean?: string | null
			/**
			 * @description Stock management for the article
			 * @example true
			 */
			stock_management?: boolean
			/**
			 * Format: float
			 * @description Article stocked quantity
			 * @example 5
			 */
			stocked_quantity?: number | null
			/** @description Determines if the article is active */
			enabled?: boolean
			/**
			 * @description Link to article picture file
			 * @example https://../files/article/12345
			 */
			picture_link?: string | null
			custom_fields?: components['schemas']['CustomFieldCollection']
		}
		UserCollection: {
			data?: components['schemas']['User'][]
		} & components['schemas']['Pagination']
		/** @description User */
		User: {
			/**
			 * @description User unique identifier
			 * @example 11615
			 */
			id?: number
			/**
			 * @description User first name
			 * @example François
			 */
			firstname?: string
			/**
			 * @description User last name
			 * @example Aupetit
			 */
			lastname?: string
			/**
			 * @description User profile
			 * @example user
			 * @enum {string}
			 */
			profile?: 'owner' | 'admin' | 'user' | 'guest'
			/**
			 * @description User email address
			 * @example contact@triiptic.fr
			 */
			email?: string
			/**
			 * Format: date-time
			 * @description User creation date
			 * @example 2020-08-16T07:06:18.000000Z
			 */
			createdate?: string
			/**
			 * Format: date-time
			 * @description User last connection date
			 * @example 2021-01-15T08:17:44.000000Z
			 */
			lastconnect?: string | null
			/**
			 * @description User role
			 * @example CTO
			 */
			role?: string
			/**
			 * @description User phone number
			 * @example 01 46 72 50 04
			 */
			phone?: string
			/**
			 * @description User cell phone number
			 * @example +33600000000
			 */
			mobile?: string
			/**
			 * @description User fax number
			 * @example 900000000
			 */
			fax?: string
			/** @description Determines if the user is active */
			enabled?: boolean
		} | null
		ProspectCollection: {
			data?: components['schemas']['Prospect'][]
		} & components['schemas']['Pagination']
		/** @description Prospect */
		Prospect: {
			/**
			 * @description Prospect id
			 * @example 12345
			 */
			prospectid?: number
			/**
			 * @description Prospect’s creator ID
			 * @example 24377
			 */
			userid?: number
			/**
			 * @description Prospect name
			 * @example Triiptic
			 */
			name?: string
			/**
			 * @description Business Number (SIRET)
			 * @example 123 456 789 12345
			 */
			business_number?: string
			/**
			 * @description Main activity code (APE, NAF)
			 * @example 1234A
			 */
			activity_number?: string
			/**
			 * @description Intra-community VAT number
			 * @example FR20123456789
			 */
			vat_number?: string
			address?: components['schemas']['Address']
			/**
			 * @description Primary phone number
			 * @example 01 46 72 50 04
			 */
			phone?: string
			/**
			 * @description User cell phone number
			 * @example +33600000000
			 */
			mobile?: string
			/**
			 * @description Fax number
			 * @example 900000000
			 */
			fax?: string
			/**
			 * @description Website
			 * @example https://www.triiptic.fr
			 */
			website?: string
			/**
			 * @description Prospect's comment added by user
			 * @example Ce prospect est génial
			 */
			comment?: string
			/** @description Prospect enabled state */
			enabled?: boolean
			custom_fields?: components['schemas']['CustomFieldCollection']
		}
		/** @description Document total amounts */
		SellDocTotal: {
			/** @description Document amount rebate */
			rebate?: {
				/**
				 * Format: float
				 * @description rebate amount excluding vat
				 * @example 36
				 */
				amount_vat_exclude?: number
				/**
				 * Format: float
				 * @description Percentage rebate on the document
				 * @example 10
				 */
				percent?: number | null
			}
			/**
			 * Format: float
			 * @description Total amount of the document excluding vat
			 * @example 324
			 */
			vat_exclude?: number
			/**
			 * Format: float
			 * @description Total amount of vat
			 * @example 64.8
			 */
			vat?: number
			/**
			 * Format: float
			 * @description Total amount of the document including vat
			 * @example 388.8
			 */
			vat_include?: number
			margin?: components['schemas']['SaleDocumentMargin']
		}
		/** @description Document total amounts */
		BuyDocTotal: {
			/**
			 * Format: float
			 * @description Total amount of the document excluding vat
			 * @example 324
			 */
			vat_exclude?: number
			/**
			 * Format: float
			 * @description Total amount of vat
			 * @example 64.8
			 */
			vat?: number
			/**
			 * Format: float
			 * @description Total amount of the document including vat
			 * @example 388.8
			 */
			vat_include?: number
		}
		SaleClassificationCollection: {
			data?: components['schemas']['SaleClassification'][]
		} & components['schemas']['Pagination']
		/**
		 * @example {
		 *   "classificationid": 5670,
		 *   "code": "01",
		 *   "label": "Table et chaise",
		 *   "account": {
		 *     "accountid": 6099,
		 *     "code": "707",
		 *     "label": "Ventes de marchandises"
		 *   },
		 *   "enabled": true
		 * }
		 */
		SaleClassification: {
			/** @description Classification Id */
			classificationid?: number
			/** @description Classification code */
			code?: string
			/** @description Classification label */
			label?: string
			account?: components['schemas']['Account']
			/** @description Classification enabled state */
			enabled?: boolean
		}
		SaleAffectationCollection: {
			data?: components['schemas']['SaleAffectation'][]
		} & components['schemas']['Pagination']
		/**
		 * @example {
		 *   "affectationid": 5670,
		 *   "code": "01",
		 *   "label": "Table et chaise",
		 *   "account": {
		 *     "accountid": 6099,
		 *     "code": "707",
		 *     "label": "Ventes de marchandises"
		 *   },
		 *   "enabled": true
		 * }
		 */
		SaleAffectation: components['schemas']['Affectation']
		/** @description Document total amounts in currency */
		SellDocCurrencyTotal: {
			/** @description Document amount rebate in currency */
			rebate?: {
				/**
				 * Format: float
				 * @description Rebate amount excluding vat in currency
				 * @example 165.36
				 */
				amount_vat_exclude?: number
				/**
				 * Format: float
				 * @description Percentage rebate on the document in currency
				 * @example 10
				 */
				percent?: number | null
			}
			/**
			 * Format: float
			 * @description Total amount of the document excluding vat in currency
			 * @example 1653.59
			 */
			vat_exclude?: number
			/**
			 * Format: float
			 * @description Total amount of vat in currency
			 * @example 330.71
			 */
			vat?: number
			/**
			 * Format: float
			 * @description Total amount of the document including vat in currency
			 * @example 1984.3
			 */
			vat_include?: number
			/** @description Total sale margin information in currency */
			margin?: components['schemas']['SaleDocumentMargin']
		} | null
		/** @description Document item */
		SellDocItem: {
			/**
			 * @description Item id
			 * @example 12345
			 */
			itemid?: number
			/**
			 * @description Article unique identifier
			 * @example 12345
			 */
			articleid?: number | null
			/**
			 * @description Article reference with html
			 * @example SPLIT
			 */
			reference?: string
			/**
			 * @description Article reference without html
			 * @example SPLIT
			 */
			reference_clean?: string
			/**
			 * @description Article designation with html
			 * @example Banana Split <br />
			 * Pour une durée de 12 mois
			 */
			designation?: string
			/**
			 * @description Article designation without html
			 * @example Banana Split
			 * Pour une durée de 12 mois
			 */
			designation_clean?: string
			/**
			 * Format: float
			 * @description Article quantity
			 * @example 12
			 */
			quantity?: number
			/**
			 * @description Quantity unit
			 * @example M
			 */
			unit?: string
			/**
			 * Format: float
			 * @description Article unit price excluding vat
			 * @example 30
			 */
			unit_price_vat_exclude?: number
			/**
			 * Format: float
			 * @description Article unit price excluding vat in currency
			 * @example null
			 */
			unit_price_vat_exclude_currency?: number | null
			/**
			 * Format: float
			 * @description Article VAT rate
			 * @example 20
			 */
			vat?: number
			/** @description Document total amounts */
			total?: {
				/**
				 * @description Document amount rebate
				 * @example null
				 */
				rebate?: {
					/**
					 * Format: float
					 * @description rebate amount excluding vat
					 * @example 36
					 */
					amount_vat_exclude?: number
					/**
					 * Format: float
					 * @description Percentage rebate on the document
					 * @example 10
					 */
					percent?: number | null
				}
				/**
				 * Format: float
				 * @description Total amount of the document excluding vat in currency
				 * @example 360
				 */
				vat_exclude?: number
				/**
				 * Format: float
				 * @description Total amount of vat in currency
				 * @example 72
				 */
				vat?: number
				/**
				 * Format: float
				 * @description Total amount of the document including vat in currency
				 * @example 432
				 */
				vat_include?: number
				margin?: components['schemas']['itemMargin']
			} | null
			/** @example null */
			currency_total?: components['schemas']['SellDocCurrencyTotal']
			/** @description Item classification information */
			sale_classification?: {
				/**
				 * @description Classification id
				 * @example 45732
				 */
				id?: number
				/**
				 * @description Classification code
				 * @example 4
				 */
				code?: string
				/**
				 * @description Classification label
				 * @example Vente de marchandise
				 */
				label?: string
			}
		}
		/** @description Document item */
		BuyDocItem: {
			/**
			 * @description Item id
			 * @example 12345
			 */
			itemid?: number
			total?: {
				/**
				 * Format: float
				 * @description Total amount of the document excluding vat in currency, null if input_mode is "vat"
				 * @example 360
				 */
				vat_exclude?: number | null
				/**
				 * Format: float
				 * @description Total amount of vat in currency, null if input_mode is "vat_exclude"
				 * @example null
				 */
				vat?: number | null
			} | null
			/** @description Item classification information */
			purchase_classification?: {
				/**
				 * @description Classification id
				 * @example 45732
				 */
				id?: number
				/**
				 * @description Classification code
				 * @example 4
				 */
				code?: string
				/**
				 * @description Classification label
				 * @example Achat de marchandise
				 */
				label?: string
			}
		}
		/** @description Document condition informations */
		Term: {
			/**
			 * @description Penalty rate
			 * @example 3
			 */
			penalty?: number
			/**
			 * @description Use legal mention about penalty rate
			 * @example false
			 */
			nopenalty?: boolean
			/**
			 * @description Use legal collection cost
			 * @example false
			 */
			recovery_indemnity?: boolean
			/**
			 * @description Discount rate
			 * @example 0
			 */
			discount_term?: number
			/**
			 * @description No relevant discount rate
			 * @example false
			 */
			no_discount_term?: boolean
			payterm?: components['schemas']['payterm']
			paytype?: components['schemas']['Paytype']
		}
		/** @description [Payment condition term](documentation#section/Payment-terms-resource) */
		payterm: {
			/**
			 * @description Payment term identifier
			 * @example 3
			 */
			paytermid?: number
			/**
			 * @description Payment term label
			 * @example 15 jours
			 */
			label?: string
		}
		PaytypeCollection: {
			data?: components['schemas']['Paytype'][]
		} & components['schemas']['Pagination']
		/** @description Payment condition type */
		Paytype: {
			/**
			 * @description Payment type identifier
			 * @example 3
			 */
			paytypeid?: number
			/**
			 * @description Payment type label
			 * @example Carte bancaire
			 */
			label?: string
		}
		UnitCodeCollection: {
			data?: components['schemas']['UnitCode'][]
		} & components['schemas']['Pagination']
		/** @description Unit code */
		UnitCode: {
			/**
			 * @description Unit code identifier
			 * @example 1
			 */
			unitcodeid?: number
			/**
			 * @description Unit code
			 * @example G
			 */
			unitcode?: string
			/**
			 * @description Unit code label
			 * @example Gramme
			 */
			label?: string
			/**
			 * @description Unit code symbol
			 * @example g
			 */
			symbol?: string
		}
		/** @enum {string} */
		Period:
			| 'lastmonth'
			| 'currentmonth'
			| 'last3months'
			| 'last6months'
			| 'currentyear'
			| 'lastyear'
			| 'fiscalyear'
			| 'lastfiscalyear'
			| 'vatperiod'
			| 'custom'
		/**
		 * @default vat_exclude
		 * @enum {string}
		 */
		AmountType: 'vat_include' | 'vat_exclude'
		Pagination: {
			links?: {
				/**
				 * Format: url
				 * @description Link to first page
				 * @example https://...?page=1
				 */
				first?: string
				/**
				 * Format: url
				 * @description Link to last page
				 * @example https://...?page=1
				 */
				last?: string
				/**
				 * Format: url
				 * @description Link to previous page
				 * @example null
				 */
				prev?: string | null
				/**
				 * Format: url
				 * @description Link to next page
				 * @example https://...?page=1
				 */
				next?: string | null
			}
			meta?: {
				/**
				 * @description Current page
				 * @example 1
				 */
				current_page?: number
				/**
				 * @description Result begin from this item number
				 * @example 1
				 */
				from?: number
				/**
				 * @description Last page
				 * @example 1
				 */
				last_page?: number
				/**
				 * Format: url
				 * @description Base endpoint path
				 * @example https://...
				 */
				path?: string
				/**
				 * @description Number of item per page
				 * @example 50
				 */
				per_page?: number
				/**
				 * @description Result end to this item number
				 * @example 50
				 */
				to?: number
				/**
				 * @description Total number of item
				 * @example 50
				 */
				total?: number
			}
		}
		BankCollection: {
			data?: components['schemas']['Bank'][]
		} & components['schemas']['Pagination'] & {
				meta?: {
					/**
					 * Format: float
					 * @description Sum of all bank balances
					 * @example 54467.45
					 */
					'balance-total'?: number
				}
			}
		Bank: {
			/**
			 * @description Bank unique identifier
			 * @example 567
			 */
			bankid?: number
			/**
			 * @description Bank label set in Evoliz
			 * @example Banque par défaut
			 */
			label?: string
			/**
			 * @description Bank Account number
			 * @example 512
			 */
			'account-code'?: string
			/**
			 * @description Bank journal code
			 * @example BQ
			 */
			'journal-code'?: string
			/**
			 * Format: float
			 * @description Bank balance
			 * @example 345.45
			 */
			balance?: number
			/**
			 * Format: date
			 * @description Date of bank balance
			 * @example 2019-01-01
			 */
			'balance-date'?: string
			/**
			 * @description Bank enabled state
			 * @example true
			 */
			enabled?: boolean
		}
		BankItemCollection: {
			data?: components['schemas']['BankItem'][]
		} & components['schemas']['Pagination']
		BankItem: {
			/**
			 * @description Object unique identifier
			 * @example 5678901
			 */
			bank_itemid?: number
			/**
			 * @description Bank Item's raw description taken from the bank's website
			 * @example FACTURE CARTE DU 061119 EVOLIZ SPLIT CARTE 1234XXXXXXXX5678
			 */
			label?: string
			/**
			 * Format: date
			 * @description Bank Item's date taken from the bank's website
			 * @example 2019-11-06
			 */
			date?: string
			/**
			 * Format: float
			 * @description Bank Item's amount<br>A positive value indicates a credit and a negative value indicates a debit
			 * @example -388.8
			 */
			amount?: number
			/**
			 * @description Bank Item's comment adding by user
			 * @example Abonnement Gestion Commerciale
			 */
			comment?: string
			bank?: components['schemas']['BankItemBank']
			/**
			 * @description State of bank reconciliation
			 * @example true
			 */
			matched?: boolean
			/**
			 * Format: date-time
			 * @description Date of bank reconciliation
			 * @example 2019-11-11T09:26:39.000000Z
			 */
			matchdate?: string | null
			matched_elements?: components['schemas']['BankItemMatchedElements']
			/** @description Bank Item locked<br>True if locked and false otherwise */
			locked?: boolean | null
			/**
			 * Format: date-time
			 * @description Bank Item locking date
			 * @example 2020-02-14T09:26:39.000000Z
			 */
			lockdate?: string | null
		}
		/** @description Bank informations */
		BankItemBank: {
			/**
			 * @description Object unique identifier
			 * @example 12345
			 */
			bankid?: number
			/**
			 * @description Bank name
			 * @example Banque Populaire
			 */
			bank_name?: string
		}
		/** @description Documents linked to the bank reconciliation */
		BankItemMatchedElements: {
			/**
			 * @description Document type
			 * @example buy
			 * @enum {string}
			 */
			type?:
				| 'invoice'
				| 'buy'
				| 'credit'
				| 'advance'
				| 'sale-affectation'
				| 'purchase-affectation'
				| 'cash-deposit'
				| 'supplier-credit'
				| 'payment'
			/**
			 * @description Document id
			 * @example 2361910
			 */
			id?: number
		}[]
		InvoiceCollection: {
			data?: components['schemas']['Invoice'][]
		} & components['schemas']['Pagination']
		AdvanceCollection: {
			data?: components['schemas']['Advance'][]
		} & components['schemas']['Pagination']
		CreditCollection: {
			data?: components['schemas']['Credit'][]
		} & components['schemas']['Pagination']
		BuyCollection: {
			data?: components['schemas']['Buy'][]
		} & components['schemas']['Pagination']
		BuyCreditCollection: {
			data?: components['schemas']['BuyCredit'][]
		} & components['schemas']['Pagination']
		SaleDocument: {
			/**
			 * @description Document number
			 * @example F-20190000160
			 */
			document_number?: string
			/**
			 * @description Document’s creator ID
			 * @example 3780
			 */
			userid?: number
			client?: components['schemas']['LinkedClient']
			default_currency?: components['schemas']['DefaultCurrency']
			/** @example null */
			document_currency?: components['schemas']['DocumentCurrency'] | null
			total?: components['schemas']['SellDocTotal']
			/** @example null */
			currency_total?: components['schemas']['SellDocCurrencyTotal'] &
				({
					/**
					 * Format: float
					 * @description Total amount of advance on this document in currency
					 * @example 275
					 */
					advance?: number
					/**
					 * Format: float
					 * @description Document amount paid in currency
					 * @example 591.48
					 */
					paid?: number
					/**
					 * Format: float
					 * @description Total amount remaining on this document in currency
					 * @example 250
					 */
					net_to_pay?: number
				} | null)
			/**
			 * @description Document status code
			 * @example 2
			 */
			status_code?: number
			/**
			 * @description Document status
			 * @example create
			 */
			status?: string
			/** @description Document status dates */
			status_dates?: {
				/**
				 * Format: date-time
				 * @description Document emission date
				 * @example 2019-10-10T09:26:39.000000Z
				 */
				create?: string | null
				/**
				 * Format: date-time
				 * @description Document sent date
				 * @example null
				 */
				sent?: string | null
				/**
				 * Format: date-time
				 * @description Document partially paid date
				 * @example null
				 */
				inpayment?: string | null
				/**
				 * Format: date-time
				 * @description Document paid date
				 * @example null
				 */
				paid?: string | null
				/**
				 * Format: date-time
				 * @description Document match date
				 * @example null
				 */
				match?: string | null
			}
			/** @description Document locked<br>True if locked and false otherwise */
			locked?: boolean | null
			/**
			 * Format: date-time
			 * @description Document lock date
			 * @example null
			 */
			lockdate?: string | null
			/**
			 * @description object on the document
			 * @example Abonnement Logiciel Gestion Commerciale
			 */
			object?: string
			/**
			 * Format: date
			 * @description Document date
			 * @example 2019-10-10
			 */
			documentdate?: string
			/**
			 * Format: date
			 * @description Due date of the document
			 * @example 2019-10-25
			 */
			duedate?: string
			/**
			 * Format: date
			 * @description Execution date of payment terms
			 * @example 2019-09-12
			 */
			execdate?: string
			term?: components['schemas']['Term']
			/**
			 * @description Comments on the document with html
			 * @example Titulaire du compte : Hingis160 SARL<br />
			 * Domiciliation du compte : Boulogne<br />
			 * IBAN : FR7612345678901234567890123
			 */
			comment?: string
			/**
			 * @description Comments on the document without html
			 * @example Titulaire du compte : Hingis160 SARL
			 * Domiciliation du compte : Boulogne
			 * IBAN : FR7612345678901234567890123
			 */
			comment_clean?: string
			/**
			 * @description External Document number
			 * @example EXT001
			 */
			external_document_number?: string
			/**
			 * @description Determines if the document is active
			 * @example true
			 */
			enabled?: boolean
			analytic?: components['schemas']['Analytic']
			/**
			 * @description Link of document file
			 * @example https://.../files/invoice/2476128
			 */
			file?: string
			/**
			 * @description Link of linked documents list
			 * @example https://.../files/invoice/2476128
			 */
			links?: string
			/**
			 * @description Webdocument link
			 * @example https://.../modules/webdoc/1MDKOED5NATQJGE21886-9ccce0c003319d10d2e94af0c75977ed
			 */
			webdoc?: string | null
		}
		Invoice: {
			/**
			 * @description Object unique identifier
			 * @example 2476128
			 */
			invoiceid?: number
			/**
			 * @description Invoice's type
			 * @enum {string}
			 */
			typedoc?: 'invoice' | 'situation' | 'benefit'
		} & components['schemas']['SaleDocument'] &
			components['schemas']['PayableDocumentStatusDate'] &
			components['schemas']['LockableDocument'] & {
				total?: components['schemas']['SellDocTotal'] & {
					/**
					 * Format: float
					 * @description Total amount of advance on this document
					 * @example 0
					 */
					advance?: number
					/**
					 * Format: float
					 * @description Paid amount on document
					 * @example 388.8
					 */
					paid?: number
					/**
					 * Format: float
					 * @description Total amount remaining on this document
					 * @example 0
					 */
					net_to_pay?: number
				}
				/**
				 * @description Number of recoveries sent for the current invoice
				 * @example 0
				 */
				recovery_number?: number
				retention?: components['schemas']['Retention']
				/**
				 * @description Link of document file
				 * @example https://.../files/invoice/2476128
				 */
				file?: string
				/**
				 * @description Link of linked documents list
				 * @example https://.../links/invoice/2476128
				 */
				links?: string
				/**
				 * @description Webdocument link
				 * @example https://.../modules/webdoc/1MDKOED5NATQJGE21886-9ccce0c003319d10d2e94af0c75977ed
				 */
				webdoc?: string | null
				items?: components['schemas']['SellDocItem']
			}
		/**
		 * @example {
		 *   "advanceid": 26263,
		 *   "document_number": "F-20200200002",
		 *   "client": {
		 *     "clientid": 9876,
		 *     "code": "C00123",
		 *     "name": "Triiptic"
		 *   },
		 *   "default_currency": {
		 *     "code": "EUR",
		 *     "conversion": 1,
		 *     "symbol": "€"
		 *   },
		 *   "document_currency": null,
		 *   "total": {
		 *     "rebate": {
		 *       "amount_vat_exclude": -36,
		 *       "percent": 10
		 *     },
		 *     "vat_exclude": -324,
		 *     "vat": -64.8,
		 *     "vat_include": -388.8,
		 *     "paid": 388.8,
		 *     "net_to_pay": 0
		 *   },
		 *   "currency_total": null,
		 *   "status_code": 2,
		 *   "status": "create",
		 *   "status_dates": {
		 *     "create": "2019-10-10T09:26:39.000000Z",
		 *     "sent": null,
		 *     "inpayment": null,
		 *     "paid": null,
		 *     "match": null
		 *   },
		 *   "locked": true,
		 *   "lockdate": null,
		 *   "object": "Abonnement Logiciel Gestion Commerciale",
		 *   "documentdate": "2019-10-10",
		 *   "duedate": "2019-10-25",
		 *   "execdate": "2019-09-12",
		 *   "term": {
		 *     "penalty": 3,
		 *     "nopenalty": false,
		 *     "recovery_indemnity": false,
		 *     "discount_term": 0,
		 *     "no_discount_term": false,
		 *     "payterm": {
		 *       "paytermid": 3,
		 *       "label": "15 jours"
		 *     },
		 *     "paytype": {
		 *       "paytypeid": 3,
		 *       "label": "Carte bancaire"
		 *     }
		 *   },
		 *   "comment": "Titulaire du compte : Hingis160 SARL<br />\nDomiciliation du compte : Boulogne<br />\nIBAN : FR7612345678901234567890123",
		 *   "comment_clean": "Titulaire du compte : Hingis160 SARL\nDomiciliation du compte : Boulogne\nIBAN : FR7612345678901234567890123",
		 *   "external_document_number": "EXT001",
		 *   "enabled": true,
		 *   "analytic": {
		 *     "id": 12345,
		 *     "code": "ANA3",
		 *     "label": "Axe analytique 3",
		 *     "enabled": true
		 *   },
		 *   "file": "https://.../files/advance/26263",
		 *   "links": "https://.../links/advance/2476128",
		 *   "webdoc": "https://.../modules/webdoc/3MDKOED5NATQJGE21886-9ccce0c003319d10d2e94af0c75977ed",
		 *   "items": {
		 *     "itemid": 12345,
		 *     "reference": "SPLIT",
		 *     "reference_clean": "SPLIT",
		 *     "designation": "Banana Split <br />\nPour une durée de 12 mois",
		 *     "designation_clean": "Banana Split\nPour une durée de 12 mois",
		 *     "quantity": 12,
		 *     "unit": "M",
		 *     "unit_price_vat_exclude": -30,
		 *     "unit_price_vat_exclude_currency": null,
		 *     "vat": 20,
		 *     "total": {
		 *       "rebate": null,
		 *       "vat_exclude": -360,
		 *       "vat": 72,
		 *       "vat_include": -432
		 *     },
		 *     "currency_total": null,
		 *     "sale_classification": {
		 *       "id": 45732,
		 *       "code": 4,
		 *       "label": "Vente de marchandise"
		 *     }
		 *   }
		 * }
		 */
		Advance: {
			/**
			 * @description Object unique identifier
			 * @example 2476128
			 */
			advanceid?: number
		} & components['schemas']['SaleDocument'] &
			components['schemas']['PayableDocumentStatusDate'] &
			components['schemas']['LockableDocument'] & {
				total?: components['schemas']['SellDocTotal'] & {
					/**
					 * Format: float
					 * @description Paid amount on document
					 * @example 388.8
					 */
					paid?: number
					/**
					 * Format: float
					 * @description Total amount remaining on this document
					 * @example 0
					 */
					net_to_pay?: number
				}
				items?: components['schemas']['SellDocItem']
			}
		/**
		 * @example {
		 *   "creditid": 26263,
		 *   "document_number": "AF-20200200001",
		 *   "client": {
		 *     "clientid": 9876,
		 *     "code": "C00123",
		 *     "name": "Triiptic"
		 *   },
		 *   "default_currency": {
		 *     "code": "EUR",
		 *     "conversion": 1,
		 *     "symbol": "€"
		 *   },
		 *   "document_currency": null,
		 *   "total": {
		 *     "rebate": {
		 *       "amount_vat_exclude": -36,
		 *       "percent": 10
		 *     },
		 *     "vat_exclude": -324,
		 *     "vat": -64.8,
		 *     "vat_include": -388.8,
		 *     "advance": 0,
		 *     "paid": 388.8,
		 *     "net_to_pay": 0
		 *   },
		 *   "currency_total": null,
		 *   "status_code": 2,
		 *   "status": "create",
		 *   "status_dates": {
		 *     "create": "2019-10-10T09:26:39.000000Z",
		 *     "sent": null,
		 *     "inpayment": null,
		 *     "paid": null,
		 *     "match": null
		 *   },
		 *   "locked": true,
		 *   "lockdate": null,
		 *   "object": "Abonnement Logiciel Gestion Commerciale",
		 *   "documentdate": "2019-10-10",
		 *   "duedate": "2019-10-25",
		 *   "execdate": "2019-09-12",
		 *   "term": {
		 *     "penalty": 3,
		 *     "nopenalty": false,
		 *     "recovery_indemnity": false,
		 *     "discount_term": 0,
		 *     "no_discount_term": false,
		 *     "payterm": {
		 *       "paytermid": 3,
		 *       "label": "15 jours"
		 *     },
		 *     "paytype": {
		 *       "paytypeid": 3,
		 *       "label": "Carte bancaire"
		 *     }
		 *   },
		 *   "comment": "Titulaire du compte : Hingis160 SARL<br />\nDomiciliation du compte : Boulogne<br />\nIBAN : FR7612345678901234567890123",
		 *   "comment_clean": "Titulaire du compte : Hingis160 SARL\nDomiciliation du compte : Boulogne\nIBAN : FR7612345678901234567890123",
		 *   "external_document_number": "EXT001",
		 *   "enabled": true,
		 *   "analytic": {
		 *     "id": 12345,
		 *     "code": "ANA3",
		 *     "label": "Axe analytique 3",
		 *     "enabled": false
		 *   },
		 *   "file": "https://../files/credit/26263",
		 *   "links": "https://../links/credit/26263",
		 *   "webdoc": "https://../modules/webdoc/4MDKOED5NATQJGE21886-9ccce0c003319d10d2e94af0c75977ed",
		 *   "items": {
		 *     "itemid": 12345,
		 *     "reference": "SPLIT",
		 *     "reference_clean": "SPLIT",
		 *     "designation": "Banana Split <br />\nPour une durée de 12 mois",
		 *     "designation_clean": "Banana Split\nPour une durée de 12 mois",
		 *     "quantity": 12,
		 *     "unit": "M",
		 *     "unit_price_vat_exclude": -30,
		 *     "unit_price_vat_exclude_currency": null,
		 *     "vat": 20,
		 *     "total": {
		 *       "rebate": null,
		 *       "vat_exclude": -360,
		 *       "vat": 72,
		 *       "vat_include": -432
		 *     },
		 *     "currency_total": null,
		 *     "sale_classification": {
		 *       "id": 45732,
		 *       "code": 4,
		 *       "label": "Vente de marchandise"
		 *     }
		 *   }
		 * }
		 */
		Credit: {
			/**
			 * @description Object unique identifier
			 * @example 2476128
			 */
			creditid?: number
		} & components['schemas']['SaleDocument'] &
			components['schemas']['PayableDocumentStatusDate'] &
			components['schemas']['LockableDocument'] & {
				total?: components['schemas']['SellDocTotal'] & {
					/**
					 * Format: float
					 * @description Total amount of advance on this document
					 * @example 0
					 */
					advance?: number
					/**
					 * Format: float
					 * @description Paid amount on document
					 * @example 388.8
					 */
					paid?: number
					/**
					 * Format: float
					 * @description Total amount remaining on this document
					 * @example 0
					 */
					net_to_pay?: number
				}
				/**
				 * @description Link of document file
				 * @example https://.../files/credit/2476128
				 */
				file?: string
				/**
				 * @description Link of linked documents list
				 * @example https://.../files/credit/2476128
				 */
				links?: string
				/**
				 * @description Webdocument link
				 * @example https://.../modules/webdoc/4MDKOED5NATQJGE21886-9ccce0c003319d10d2e94af0c75977ed
				 */
				webdoc?: string | null
				items?: components['schemas']['SellDocItem']
			}
		DeliveryCollection: {
			data?: components['schemas']['Delivery'][]
		} & components['schemas']['Pagination']
		Delivery: {
			/**
			 * @description Object unique identifier
			 * @example 2476128
			 */
			deliveryid?: number
			/**
			 * @description Document number
			 * @example F-20190000160
			 */
			document_number?: string
			/**
			 * @description Document’s creator ID
			 * @example 3780
			 */
			userid?: number
			client?: components['schemas']['LinkedClient']
			default_currency?: components['schemas']['DefaultCurrency']
			/** @example null */
			document_currency?: components['schemas']['DocumentCurrency'] | null
			total?: components['schemas']['SellDocTotal'] & {
				/**
				 * Format: float
				 * @description Total amount remaining on this document
				 * @example 0
				 */
				net_to_pay?: number
				/**
				 * Format: float
				 * @description Total quantity on this document
				 * @example 12
				 */
				total_quantity?: number
				/**
				 * Format: float
				 * @description number of package on document
				 * @example 1
				 */
				number_packages?: number
				/**
				 * Format: float
				 * @description Total weight on this document
				 * @example 152.123
				 */
				package_weight?: number
			}
			/** @example null */
			currency_total?:
				| (components['schemas']['SellDocCurrencyTotal'] & {
						/**
						 * Format: float
						 * @description Total amount of advance on this document in currency
						 * @example 275
						 */
						advance?: number
						/**
						 * Format: float
						 * @description Document amount paid in currency
						 * @example 591.48
						 */
						paid?: number
						/**
						 * Format: float
						 * @description Total amount remaining on this document in currency
						 * @example 250
						 */
						net_to_pay?: number
				  })
				| null
			/**
			 * @description Document status code
			 * @example 2
			 */
			status_code?: number
			/**
			 * @description Document status
			 * @example create
			 */
			status?: string
			/** @description Document status dates */
			status_dates?: {
				/**
				 * Format: date-time
				 * @description Document emission date
				 * @example 2019-10-10T09:26:39.000000Z
				 */
				create?: string | null
				/**
				 * Format: date-time
				 * @description Document sent date
				 * @example null
				 */
				sent?: string | null
				/**
				 * Format: date-time
				 * @description Document accept date
				 * @example null
				 */
				accept?: string | null
				/**
				 * Format: date-time
				 * @description Date when document has been set on waiting state.
				 * @example null
				 */
				wait?: string | null
				/**
				 * Format: date-time
				 * @description Document reject date
				 * @example null
				 */
				reject?: string | null
				/**
				 * Format: date-time
				 * @description Document invoice date
				 * @example null
				 */
				invoice?: string | null
				/**
				 * Format: date-time
				 * @description Document close date
				 * @example null
				 */
				close?: string | null
			}
			/**
			 * @description object on the document
			 * @example Abonnement Logiciel Gestion Commerciale
			 */
			object?: string
			/**
			 * Format: date
			 * @description Document date
			 * @example 2019-10-10
			 */
			documentdate?: string
			/**
			 * Format: date
			 * @description Due date of the document
			 * @example 2019-10-25
			 */
			duedate?: string
			/**
			 * Format: date
			 * @description Execution date of payment terms
			 * @example 2019-09-12
			 */
			execdate?: string
			term?: components['schemas']['Term']
			/**
			 * @description Comments on the document with html
			 * @example Titulaire du compte : Hingis160 SARL<br />
			 * Domiciliation du compte : Boulogne<br />
			 * IBAN : FR7612345678901234567890123
			 */
			comment?: string
			/**
			 * @description Comments on the document without html
			 * @example Titulaire du compte : Hingis160 SARL
			 * Domiciliation du compte : Boulogne
			 * IBAN : FR7612345678901234567890123
			 */
			comment_clean?: string
			/**
			 * @description Shipping information with html
			 * @example null
			 */
			shipping?: string
			/**
			 * @description Shipping information without html
			 * @example null
			 */
			shipping_clean?: string
			/**
			 * @description External Document number
			 * @example EXT001
			 */
			external_document_number?: string
			/**
			 * @description Determines if the document is active
			 * @example true
			 */
			enabled?: boolean
			analytic?: components['schemas']['Analytic']
			/**
			 * @description Link of document file
			 * @example https://.../files/delivery/2476128
			 */
			file?: string
			/**
			 * @description Link of linked documents list
			 * @example https://.../links/delivery/2476128
			 */
			links?: string
			/**
			 * @description Webdocument link
			 * @example https://.../modules/webdoc/6MDKOED5NATQJGE21886-9ccce0c003319d10d2e94af0c75977ed
			 */
			webdoc?: string | null
			items?: components['schemas']['SellDocItem'] & {
				/**
				 * Format: float
				 * @description Item weight
				 * @example 152.123
				 */
				weight?: number | null
			}
		}
		/**
		 * @example {
		 *   "buyid": 2361910,
		 *   "userid": 3780,
		 *   "document_number": "HA-20200002348",
		 *   "supplier": {
		 *     "supplierid": 45369,
		 *     "code": "F160",
		 *     "name": "Triiptic"
		 *   },
		 *   "default_currency": {
		 *     "code": "EUR",
		 *     "conversion": 1,
		 *     "symbol": "€"
		 *   },
		 *   "total": {
		 *     "vat_exclude": 324,
		 *     "vat": 64.8,
		 *     "vat_include": 388.8,
		 *     "paid": 0,
		 *     "net_to_pay": 388.8
		 *   },
		 *   "status_code": 2,
		 *   "status": "create",
		 *   "status_dates": {
		 *     "create": "2019-10-15T17:45:00.000000Z",
		 *     "prepare": "2019-11-17T14:25:00.000000Z",
		 *     "voucher": null,
		 *     "inpayment": null,
		 *     "paid": null,
		 *     "match": null
		 *   },
		 *   "locked": null,
		 *   "lockdate": null,
		 *   "documentdate": "2019-10-10",
		 *   "duedate": "2019-10-25",
		 *   "term": {
		 *     "paytype": {
		 *       "paytypeid": 3,
		 *       "label": "Carte bancaire"
		 *     },
		 *     "payterm": {
		 *       "paytermid": 3,
		 *       "label": "15 jours"
		 *     }
		 *   },
		 *   "comment": "",
		 *   "label": "Triiptic\r\nEtudes et prestations de service",
		 *   "external_document_number": "F-20190000160",
		 *   "enabled": true,
		 *   "analytic": null,
		 *   "input_mode": "vat_exclude",
		 *   "client": null,
		 *   "billable": false,
		 *   "startdate": null,
		 *   "enddate": null,
		 *   "cashentry": {
		 *     "entryid": 25,
		 *     "date": "22-09-2022",
		 *     "cash": {
		 *       "id": 75,
		 *       "label": "Caisse Toulon"
		 *     }
		 *   },
		 *   "file": "https://../files/buy/2361910",
		 *   "links": "https://../links/buy/2361910",
		 *   "webdoc": "https://.../modules/webdoc/9MDKOED5NATQJGE21886-9ccce0c003319d10d2e94af0c75977ed",
		 *   "items": {
		 *     "itemid": 3569175,
		 *     "total": {
		 *       "vat_exclude": 324,
		 *       "vat": null
		 *     },
		 *     "purchase_classification": {
		 *       "id": 68049,
		 *       "code": "02",
		 *       "label": "Etudes et prestations de service"
		 *     }
		 *   }
		 * }
		 */
		Buy: {
			/**
			 * @description Object unique identifier
			 * @example 2476128
			 */
			buyid?: number
			/**
			 * @description Buy creator ID
			 * @example 3780
			 */
			userid?: number
		} & components['schemas']['BuyBaseDoc'] & {
				/**
				 * @description Determine if document is billable to the client
				 * @example true
				 */
				billable?: boolean
				client?: components['schemas']['LinkedClient']
				/**
				 * Format: date
				 * @description Begin date
				 * @example null
				 */
				startdate?: string | null
				/**
				 * Format: date
				 * @description End date
				 * @example null
				 */
				enddate?: string | null
				cashentry?: components['schemas']['LinkedCashEntry']
				items?: components['schemas']['BuyDocItem']
				/** @description Document status dates */
				status_dates?: {
					/**
					 * Format: date-time
					 * @description Document emission date
					 * @example 2019-10-10T09:26:39.000000Z
					 */
					create?: string | null
					/**
					 * Format: date-time
					 * @description Document prepared date
					 * @example 2019-10-10T09:41:39.000000Z
					 */
					prepare?: string | null
					/**
					 * Format: date-time
					 * @description Document voucher date
					 * @example 2019-10-10T09:36:39.000000Z
					 */
					voucher?: string | null
					/**
					 * Format: date-time
					 * @description Document partially paid date
					 * @example null
					 */
					inpayment?: string | null
					/**
					 * Format: date-time
					 * @description Document paid date
					 * @example null
					 */
					paid?: string | null
					/**
					 * Format: date-time
					 * @description Document match date
					 * @example null
					 */
					match?: string | null
				}
			}
		/**
		 * @example {
		 *   "supplier_creditid": 26263,
		 *   "document_number": "AF-20200200001",
		 *   "supplier": {
		 *     "supplierid": 45369,
		 *     "code": "F160",
		 *     "name": "Triiptic"
		 *   },
		 *   "default_currency": {
		 *     "code": "EUR",
		 *     "conversion": 1,
		 *     "symbol": "€"
		 *   },
		 *   "total": {
		 *     "vat_exclude": 324,
		 *     "vat": 64.8,
		 *     "vat_include": 388.8
		 *   },
		 *   "status_code": 2,
		 *   "status": "create",
		 *   "status_dates": {
		 *     "create": "2020-01-15T18:00:00.000000Z",
		 *     "paid": null,
		 *     "match": null
		 *   },
		 *   "locked": null,
		 *   "lockdate": null,
		 *   "documentdate": "2019-12-14",
		 *   "duedate": "2019-12-14",
		 *   "term": {
		 *     "paytype": {
		 *       "paytypeid": 3,
		 *       "label": "Carte bancaire"
		 *     },
		 *     "payterm": {
		 *       "paytermid": 3,
		 *       "label": "15 jours"
		 *     }
		 *   },
		 *   "comment": "",
		 *   "label": "Triiptic\r\nEtudes et prestations de service",
		 *   "external_document_number": "F-20190000160",
		 *   "enabled": true,
		 *   "analytic": null,
		 *   "input_mode": "vat_exclude",
		 *   "file": "https://../files/supplier-credit/26263",
		 *   "webdoc": "https://.../modules/webdoc/AMDKOED5NATQJGE21886-9ccce0c003319d10d2e94af0c75977ed",
		 *   "items": {
		 *     "itemid": 3569176,
		 *     "total": {
		 *       "vat_exclude": 324,
		 *       "vat": null
		 *     },
		 *     "purchase_classification": {
		 *       "id": 68049,
		 *       "code": "02",
		 *       "label": "Etudes et prestations de service"
		 *     }
		 *   }
		 * }
		 */
		BuyCredit: {
			/**
			 * @description Object unique identifier
			 * @example 2476128
			 */
			supplier_creditid?: number
		} & components['schemas']['BuyBaseDoc'] & {
				items?: components['schemas']['BuyDocItem']
			}
		BuyBaseDoc: {
			/**
			 * @description Document number
			 * @example F-20190000160
			 */
			document_number?: string
			supplier?: components['schemas']['LinkedSupplier']
			default_currency?: components['schemas']['DefaultCurrency']
			total?: components['schemas']['BuyDocTotal'] & {
				/**
				 * Format: float
				 * @description Paid amount on Document
				 * @example 388.8
				 */
				paid?: number
				/**
				 * Format: float
				 * @description Total amount remaining on this document
				 * @example 0
				 */
				net_to_pay?: number
			}
			/**
			 * @description Document status code
			 * @example 2
			 */
			status_code?: number
			/**
			 * @description Document status
			 * @example create
			 */
			status?: string
			/** @description Document status dates */
			status_dates?: {
				/**
				 * Format: date-time
				 * @description Document emission date
				 * @example 2019-10-10T09:26:39.000000Z
				 */
				create?: string | null
				/**
				 * Format: date-time
				 * @description Document partially paid date
				 * @example null
				 */
				inpayment?: string | null
				/**
				 * Format: date-time
				 * @description Document paid date
				 * @example null
				 */
				paid?: string | null
				/**
				 * Format: date-time
				 * @description Document match date
				 * @example null
				 */
				match?: string | null
			}
			/** @description Document locked <br>True if locked and false otherwise */
			locked?: boolean | null
			/**
			 * Format: date-time
			 * @description Document lock date
			 * @example null
			 */
			lockdate?: string | null
			/**
			 * Format: date
			 * @description Document date
			 * @example 2019-10-10
			 */
			documentdate?: string
			/**
			 * Format: date
			 * @description Due date of document
			 * @example 2019-10-25
			 */
			duedate?: string
			term?: {
				paytype?: components['schemas']['Paytype']
				payterm?: components['schemas']['payterm']
			}
			/**
			 * @description Comments on the document with html
			 * @example Titulaire du compte : Hingis160 SARL<br />
			 * Domiciliation du compte : Boulogne<br />
			 * IBAN : FR7612345678901234567890123
			 */
			comment?: string
			/**
			 * @description Document's label
			 * @example achat de marchandises ...
			 */
			label?: string
			/**
			 * @description External Document number
			 * @example EXT001
			 */
			external_document_number?: string
			/**
			 * @description Determines if document is active
			 * @example true
			 */
			enabled?: boolean
			/**
			 * @description Determine if the document is set with vat include or exclude
			 * @example vat exclude
			 * @enum {string}
			 */
			input_mode?: 'vat' | 'vat exclude'
			analytic?: components['schemas']['Analytic']
			/**
			 * @description Link to document file
			 * @example https://../files/supplier-credit/123456
			 */
			file?: string
			/**
			 * @description Webdocument link
			 * @example https://.../modules/webdoc/9MDKOED5NATQJGE21886-9ccce0c003319d10d2e94af0c75977ed
			 */
			webdoc?: string
		} & components['schemas']['PayableDocumentStatusDate'] &
			components['schemas']['LockableDocument']
		PaymentCollection: {
			data?: components['schemas']['Payment'][]
		} & components['schemas']['Pagination']
		Payment: {
			/**
			 * @description Object unique identifier
			 * @example 2476128
			 */
			paymentid?: number
			/**
			 * @description Payment’s creator ID
			 * @example 3780
			 */
			userid?: number
			document?: components['schemas']['PaymentDocument']
			cashentry?: components['schemas']['LinkedCashEntry']
			/**
			 * Format: date
			 * @description Payment entry date
			 * @example 2019-10-10
			 */
			paydate?: string
			/**
			 * Format: date-time
			 * @description Payment creation date
			 * @example 2019-10-10T09:26:39.000000Z
			 */
			stampdate?: string
			client?: components['schemas']['LinkedClient']
			/**
			 * @description Payment label
			 * @example Règlement client
			 */
			label?: string
			paytype?: components['schemas']['PaymentPayType']
			default_currency?: components['schemas']['DefaultCurrency']
			document_currency?: components['schemas']['DocumentCurrency']
			/**
			 * Format: float
			 * @description Payment amount
			 * @example 537.71
			 */
			amount?: number
			/**
			 * Format: float
			 * @description Payment amount in currency
			 * @example null
			 */
			currency_amount?: number | null
			/**
			 * @description Link of document file
			 * @example https://.../links/payment/2476128
			 */
			links?: string
			/**
			 * @description Comments on the payment
			 * @example Chèque numéro 1234
			 */
			comment?: string
		}
		/** @description Linked document information (only one doc id will be valued, the others are set to null) */
		PaymentDocument: {
			/**
			 * @description Linked Invoice Id
			 * @example 4013943
			 */
			invoiceid?: number
			/**
			 * @description Linked Credit Id
			 * @example 4013943
			 */
			creditid?: number
			/**
			 * @description Linked Advance Id
			 * @example 4013943
			 */
			advanceid?: number
			/**
			 * @description Linked document number
			 * @example F-20190000160
			 */
			document_number?: string
		}
		OverduePaymentReport: {
			/** @description Report informations */
			infos?: {
				/**
				 * @description Report name
				 * @example Overdue payment report
				 */
				report_name?: string
				/**
				 * Format: date-time
				 * @description Report generation stampdate
				 */
				stampdate?: string
				/**
				 * @description Report currency
				 * @example EUR
				 */
				currency?: string
			}
			/**
			 * @description Report data
			 * @example [
			 *   {
			 *     "from": 31,
			 *     "to": null,
			 *     "amount": 15420,
			 *     "period_unit": "days"
			 *   },
			 *   {
			 *     "from": 16,
			 *     "to": 30,
			 *     "amount": 2230,
			 *     "period_unit": "days"
			 *   },
			 *   {
			 *     "from": 1,
			 *     "to": 15,
			 *     "amount": 25562,
			 *     "period_unit": "days"
			 *   }
			 * ]
			 */
			data?: {
				/** @description Beginning of category period */
				from?: number
				/** @description End of category period */
				to?: number | null
				/** @description Unpaid invoices sum in category */
				amount?: number
				/**
				 * @description Period unit of from / to items.
				 * @example days
				 */
				period_unit?: string
			}[]
			/** @description Report total */
			total?: {
				/**
				 * @description total number of recoveries concerned by the report
				 * @example 17
				 */
				overdue_count?: number
				/**
				 * @description Unpaid invoices left to pay total amount
				 * @example 43212
				 */
				overdue_net_to_pay?: number
			}
		}
		OverdueSettlementReport: {
			/** @description Report informations */
			infos?: {
				/**
				 * @description Report name
				 * @example Overdue settlements report
				 */
				report_name?: string
				/**
				 * Format: date-time
				 * @description Report generation stampdate
				 */
				stampdate?: string
				/**
				 * @description Report currency
				 * @example EUR
				 */
				currency?: string
			}
			/**
			 * @description Report data
			 * @example [
			 *   {
			 *     "from": 31,
			 *     "to": null,
			 *     "amount": 15420,
			 *     "period_unit": "days"
			 *   },
			 *   {
			 *     "from": 16,
			 *     "to": 30,
			 *     "amount": 2230,
			 *     "period_unit": "days"
			 *   },
			 *   {
			 *     "from": 1,
			 *     "to": 15,
			 *     "amount": 25562,
			 *     "period_unit": "days"
			 *   }
			 * ]
			 */
			data?: {
				/** @description Beginning of category period */
				from?: number
				/** @description End of category period */
				to?: number | null
				/** @description Unpaid buys sum in category */
				amount?: number
				/**
				 * @description Period unit of from / to items.
				 * @example days
				 */
				period_unit?: string
			}[]
			/** @description Report total */
			total?: {
				/**
				 * @description total number of overdues concerned by the report
				 * @example 17
				 */
				overdue_count?: number
				/**
				 * @description Overdue settlements left to pay total amount
				 * @example 43212
				 */
				overdue_net_to_pay?: number
			}
		}
		TurnoverReport: {
			/** @description Turnover informations */
			infos?: {
				/**
				 * @description Report name
				 * @example Turnover
				 */
				report_name?: string
				/**
				 * Format: date-time
				 * @description Report generation stampdate
				 */
				stampdate?: string
				/**
				 * @description Currency type for all amounts of the report
				 * @example EUR
				 */
				currency?: string
				/**
				 * Format: date-time
				 * @description Report documents start date
				 */
				start_period?: string
				/**
				 * Format: date-time
				 * @description Report documents end date
				 */
				end_period?: string
			}
			/**
			 * @example [
			 *   {
			 *     "2017": {
			 *       "12": {
			 *         "turnover_vat_exclude": 80,
			 *         "turnover_vat_include": 100,
			 *         "evolution_turnover_vat_include": "80%",
			 *         "payment": 500,
			 *         "evolution_payment": "-150%",
			 *         "forecast_goal": 1500.1
			 *       }
			 *     },
			 *     "2019": {
			 *       "1": {
			 *         "turnover_vat_exclude": 80,
			 *         "turnover_vat_include": 200,
			 *         "evolution_turnover_vat_include": "100%",
			 *         "payment": 250,
			 *         "evolution_payment": "-50%",
			 *         "forecast_goal": 2500.99
			 *       }
			 *     }
			 *   }
			 * ]
			 */
			data?: {
				year?: {
					month?: components['schemas']['TurnoverItem']
				}[]
			}[]
			/**
			 * @example {
			 *   "turnover_vat_exclude": 160,
			 *   "turnover_vat_include": 300,
			 *   "evolution_turnover_vat_include": "90%",
			 *   "payment": 750,
			 *   "evolution_payment": "-100%",
			 *   "forecast_goal": 4000.2
			 * }
			 */
			total?: components['schemas']['TurnoverItem']
		}
		TurnoverItem: {
			/**
			 * Format: float
			 * @description Turnover vat excluded
			 */
			turnover_vat_exclude?: number
			/**
			 * Format: float
			 * @description Turnover vat included
			 */
			turnover_vat_include?: number
			/** @description Turnover vat included evolution from previous month */
			evolution_turnover_vat_include?: string
			/**
			 * Format: float
			 * @description Payments amount
			 */
			payment?: number
			/** @description Payments amount evolution from previous month */
			evolution_payment?: string
			/**
			 * Format: float
			 * @description Goal defined in forecast report
			 */
			forecast_goal?: number
		}
		Event: {
			/**
			 * @description Object unique identifier
			 * @example 105614026
			 */
			eventid?: number
			/**
			 * @description Event creator ID
			 * @example 3780
			 */
			userid?: number
			/**
			 * @description Event action
			 * @example create
			 * @enum {string}
			 */
			action?:
				| 'delete'
				| 'filled'
				| 'update'
				| 'create'
				| 'match'
				| 'accept'
				| 'reject'
				| 'invoice'
			/** @description Element linked to this event */
			linked_element?: {
				/**
				 * @description Element type
				 * @example INVOICE
				 * @enum {string}
				 */
				type?: 'INVOICE' | 'ADVANCE' | 'CREDIT' | 'PAYMENT' | 'CORDER'
				/**
				 * @description Element unique identifier
				 * @example 2476128
				 */
				id?: number
				/**
				 * @description Element information
				 * @example F-20190000160
				 */
				info?: string
				/**
				 * @description Link of the element
				 * @example https://.../invoices/2476128
				 */
				link?: string | null
			}
			/**
			 * Format: date-time
			 * @description Event creation date
			 * @example 2019-10-10T09:26:39.000000Z
			 */
			stampdate?: string
		}
		EventCollection: {
			data?: components['schemas']['Event'][]
		} & components['schemas']['Pagination']
		BalanceJournalCollection: {
			data?: components['schemas']['BalanceJournalResource'][]
		}
		GeneralLedgerCollection: {
			data?: components['schemas']['GeneralLedgerResource'][]
		}
		PurchasesJournalCollection: {
			data?: components['schemas']['journalPurchaseResource'][]
		} & components['schemas']['Pagination']
		PurchaseClassificationCollection: {
			data?: components['schemas']['PurchaseClassification'][]
		} & components['schemas']['Pagination']
		PurchaseClassification: {
			/**
			 * @description Classification Id
			 * @example 34597
			 */
			classificationid?: number
			/**
			 * @description Classification code
			 * @example 06
			 */
			code?: string
			/**
			 * @description Classification label
			 * @example Fuel
			 */
			label?: string
			/**
			 * @example {
			 *   "accountid": 45,
			 *   "code": "6061",
			 *   "label": "Fournitures non stockables"
			 * }
			 */
			account?: components['schemas']['Account'] | null
			/**
			 * @description Classification vat
			 * @example {
			 *   "accountid": 44,
			 *   "code": "44566",
			 *   "label": "TVA sur autres biens et services"
			 * }
			 */
			vataccount?: components['schemas']['Account'] | null
			/**
			 * Format: float
			 * @description Classification VAT rate in %
			 */
			rate?: number | null
			/** @description Classification enabled state */
			enabled?: boolean
		}
		PurchaseAffectationCollection: {
			data?: components['schemas']['PurchaseAffectation'][]
		} & components['schemas']['Pagination']
		/**
		 * @example {
		 *   "affectationid": 5670,
		 *   "code": "FR-BANK",
		 *   "label": "Frais bancaire",
		 *   "account": {
		 *     "accountid": 45,
		 *     "code": "6061",
		 *     "label": "Fournitures non stockables"
		 *   },
		 *   "enabled": true
		 * }
		 */
		PurchaseAffectation: components['schemas']['Affectation']
		/** @description Purchases affectation */
		Affectation: {
			/** @description Affectation Id */
			affectationid?: number
			/** @description Affectation code */
			code?: string
			/** @description Affectation label */
			label?: string
			account?: components['schemas']['Account']
			/** @description Affectation enabled state */
			enabled?: boolean
		}
		File: {
			/**
			 * @description File name
			 * @example H-000000000001.pdf
			 */
			file_name?: string
			/**
			 * @description File size in Bytes
			 * @example 1552365
			 */
			file_size?: number
			/**
			 * @description File Content (base64encoded)
			 * @example base64encodedcontent
			 */
			file_content?: string
		}
		Attachment: {
			/**
			 * @description Object unique identifier
			 * @example 1552
			 */
			attachmentid?: number
			/**
			 * @description The type of the linked document
			 * @example buy
			 * @enum {string}
			 */
			doc_type?: 'buy' | 'quotes'
			/**
			 * @description The linked document unique ID
			 * @example 6532
			 */
			docid?: number
			/**
			 * @description Attachment name
			 * @example H-000000000001.pdf
			 */
			file_name?: string
			/**
			 * @description Attachment size in Bytes
			 * @example 1552365
			 */
			file_size?: number
		}
		SingleAttachment: components['schemas']['Attachment'] & {
			/**
			 * @description File Content (base64encoded)
			 * @example base64encodedcontent
			 */
			file_content?: string
		}
		AttachmentCollection: {
			data?: components['schemas']['Attachment'][]
		} & components['schemas']['Pagination']
		BankJournalCollection: {
			data?: components['schemas']['journalBankResource'][]
		} & components['schemas']['Pagination']
		SellJournalCollection: {
			data?: components['schemas']['journalSellResource'][]
		} & components['schemas']['Pagination']
		CashJournalCollection: {
			data?: components['schemas']['journalCashResource'][]
		} & components['schemas']['Pagination']
		ANJournalCollection: {
			data?: components['schemas']['journalANResource'][]
		} & components['schemas']['Pagination']
		ODJournalCollection: {
			data?: components['schemas']['journalODResource'][]
		} & components['schemas']['Pagination']
		FecJournalCollection: {
			data?: components['schemas']['journalFecResource'][]
		} & components['schemas']['Pagination']
		/**
		 * @example {
		 *   "journal_code": "VE",
		 *   "journal_label": "Journal de vente",
		 *   "journal_entry_number": "",
		 *   "accountdate": "20200217",
		 *   "account_number": "41100000",
		 *   "account_label": "Triiptic",
		 *   "account_third_party_number": "C00123",
		 *   "account_third_party_label": "Triiptic",
		 *   "document_number": "F-20190000160",
		 *   "documentdate": "20191010",
		 *   "journal_entry_label": "F-20190000160",
		 *   "debit": 388.8,
		 *   "credit": 0,
		 *   "accounting_lettering": "",
		 *   "accounting_lettering_date": "",
		 *   "lockdate": "",
		 *   "currency_amount": null,
		 *   "currency_code": null,
		 *   "file": "https://.../files/invoice/2476128"
		 * }
		 */
		journalFecResource: {
			/** @description Journal code */
			journal_code?: string
			/** @description Journal label */
			journal_label?: string
			/**
			 * @description Journal entry number
			 * @example
			 */
			journal_entry_number?: string
			/**
			 * Format: date
			 * @description Accounting date with "Ymd" format
			 */
			accountdate?: string
			/**
			 * @description Account number
			 * @example 40100000
			 */
			account_number?: string
			/** @description Account label */
			account_label?: string
			/** @description Third party account */
			account_third_party_number?: string
			/** @description Third party account label */
			account_third_party_label?: string
			/** @description Document number */
			document_number?: string
			/**
			 * Format: date
			 * @description Document date with "Ymd" format
			 */
			documentdate?: string
			/** @description Journal entry label */
			journal_entry_label?: string
			/**
			 * Format: float
			 * @description Debit
			 */
			debit?: number
			/**
			 * Format: float
			 * @description Credit
			 */
			credit?: number
			/** @description Lettering */
			accounting_lettering?: string
			/**
			 * Format: date
			 * @description Lettering date
			 */
			accounting_lettering_date?: string
			/**
			 * Format: date
			 * @description Entry lockdate
			 */
			lockdate?: string
			/**
			 * Format: float
			 * @description Currency amount
			 */
			currency_amount?: number | null
			/** @description Currency code */
			currency_code?: string | null
			/** @description Link of document file */
			file?: string
		}
		/**
		 * @example {
		 *   "account_number": "51200000",
		 *   "account_label": "Banque",
		 *   "debit": 3738.31,
		 *   "credit": 6068.28,
		 *   "balance": 2329.97
		 * }
		 */
		BalanceJournalResource: {
			/** @description Account number */
			account_number?: string
			/** @description Account label */
			account_label?: string
			/**
			 * Format: float
			 * @description Debit
			 */
			debit?: number
			/**
			 * Format: float
			 * @description Credit
			 */
			credit?: number
			/**
			 * Format: float
			 * @description Balance of account
			 */
			balance?: number
		}
		/**
		 * @example {
		 *   "account_number": "51200000",
		 *   "account_label": "Banque",
		 *   "entry_date": "02/06/2021",
		 *   "journal_code": "BTNR",
		 *   "document_number": "F-00000000003",
		 *   "third_party": "Triiptic",
		 *   "document_status": "Rapproché",
		 *   "file": "https://.../files/invoice/2476128",
		 *   "debit": 3738.31,
		 *   "credit": 6068.28,
		 *   "balance": 2329.97
		 * }
		 */
		GeneralLedgerResource: {
			/** @description Account number */
			account_number?: string
			/** @description Account label */
			account_label?: string
			/**
			 * Format: date
			 * @description Entry date
			 */
			entry_date?: string
			/** @description Journal code */
			journal_code?: string
			/** @description Document number */
			document_number?: string
			/** @description Third party name */
			third_party?: string | null
			/**
			 * @description Document status
			 * @enum {string|null}
			 */
			document_status?: 'Non-rapproché' | 'Rapproché' | null
			/** @description Link of document file */
			file?: string | null
			/**
			 * Format: float
			 * @description Debit
			 */
			debit?: number
			/**
			 * Format: float
			 * @description Credit
			 */
			credit?: number
			/**
			 * Format: float
			 * @description Balance of account
			 */
			balance?: number
		}
		/**
		 * @example {
		 *   "journal_code": "AC",
		 *   "journal_label": "Journal d'achat",
		 *   "journal_entry_number": "",
		 *   "accountdate": "17/02/2020",
		 *   "account_number": "40100000",
		 *   "account_label": "Compte comptable fournisseur",
		 *   "account_third_party_number": "F160",
		 *   "account_third_party_label": "Triiptic",
		 *   "document_number": "HA-20200002348",
		 *   "documentdate": "10/10/2019",
		 *   "journal_entry_label": "Triiptic\r\nEtudes et prestations de service",
		 *   "debit": 0,
		 *   "credit": 388.8,
		 *   "accounting_lettering": "",
		 *   "accounting_lettering_date": "",
		 *   "lockdate": "",
		 *   "currency_amount": null,
		 *   "currency_code": null
		 * }
		 */
		journalPurchaseResource: components['schemas']['JournalBaseResource'] & {
			/**
			 * Format: date
			 * @description Start date
			 */
			startdate?: string
			/**
			 * Format: date
			 * @description End date
			 */
			enddate?: string
			/** @description External document number */
			external_document_number?: number
			/** @description Analytic axis code */
			analytic_code?: string
			/**
			 * Format: date
			 * @description Document due date
			 */
			duedate?: string
		}
		/**
		 * @example {
		 *   "example": {
		 *     "journal_code": "BQ",
		 *     "journal_label": "Journal de banque",
		 *     "journal_entry_number": "",
		 *     "accountdate": "17/02/2020",
		 *     "account_number": "51200000",
		 *     "account_label": "Banque Populaire",
		 *     "account_third_party_number": "F160",
		 *     "account_third_party_label": "Triiptic",
		 *     "document_number": "HA-20200002348",
		 *     "documentdate": "10/10/2019",
		 *     "journal_entry_label": "FACTURE CARTE DU 061119 EVOLIZ SPLIT CARTE 1234XXXXXXXX5678",
		 *     "debit": 0,
		 *     "credit": 388.8,
		 *     "accounting_lettering": "",
		 *     "accounting_lettering_date": "",
		 *     "lockdate": "",
		 *     "currency_amount": null,
		 *     "currency_code": null
		 *   }
		 * }
		 */
		journalBankResource: components['schemas']['JournalBaseResource'] & {
			/**
			 * Format: date
			 * @description Start date
			 */
			execdate?: string
			/**
			 * Format: date
			 * @description Document due date
			 */
			duedate?: string
			/**
			 * Format: date
			 * @description Start date
			 */
			startdate?: string
			/**
			 * Format: date
			 * @description End date
			 */
			enddate?: string
			/** @description Analytic axis code */
			analytic_code?: string
		}
		/**
		 * @example {
		 *   "journal_code": "VE",
		 *   "journal_label": "Journal de vente",
		 *   "journal_entry_number": "",
		 *   "accountdate": "17/02/2020",
		 *   "account_number": "41100000",
		 *   "account_label": "Triiptic",
		 *   "account_third_party_number": "C00123",
		 *   "account_third_party_label": "Triiptic",
		 *   "document_number": "F-20190000160",
		 *   "documentdate": "10/10/2019",
		 *   "journal_entry_label": "F-20190000160",
		 *   "debit": 388.8,
		 *   "credit": 0,
		 *   "accounting_lettering": "",
		 *   "accounting_lettering_date": "",
		 *   "lockdate": "",
		 *   "currency_amount": null,
		 *   "currency_code": null
		 * }
		 */
		journalSellResource: components['schemas']['JournalBaseResource'] & {
			/**
			 * Format: date
			 * @description Document due date
			 */
			duedate?: string
			/**
			 * Format: date
			 * @description Start date
			 */
			execdate?: string
			/** @description Analytic axis code */
			analytic_code?: string
		}
		/**
		 * @example {
		 *   "journal_code": "OD",
		 *   "journal_label": "Journal d'OD",
		 *   "journal_entry_number": "",
		 *   "accountdate": "17/02/2020",
		 *   "account_number": "42100000",
		 *   "account_label": "Personnel - Rémunérations dues",
		 *   "account_third_party_number": null,
		 *   "account_third_party_label": null,
		 *   "document_number": "Salaire salarié",
		 *   "documentdate": "14/02/2020",
		 *   "journal_entry_label": "Salaire salarié",
		 *   "debit": 1200,
		 *   "credit": 0,
		 *   "accounting_lettering": "",
		 *   "accounting_lettering_date": "",
		 *   "lockdate": "",
		 *   "currency_amount": null,
		 *   "currency_code": null
		 * }
		 */
		journalODResource: components['schemas']['JournalBaseResource'] & {
			/**
			 * Format: date
			 * @description Document pay date
			 */
			paydate?: string
			/** @description Analytic axis code */
			analytic_code?: string
		}
		/**
		 * @example {
		 *   "journal_code": "AN",
		 *   "journal_label": "Journal d'à-nouveaux",
		 *   "journal_entry_number": "",
		 *   "accountdate": "17/02/2020",
		 *   "account_number": "42100000",
		 *   "account_label": "Personnel - Rémunérations dues",
		 *   "account_third_party_number": null,
		 *   "account_third_party_label": null,
		 *   "document_number": "Salaire salarié",
		 *   "documentdate": "14/02/2020",
		 *   "journal_entry_label": "Salaire salarié",
		 *   "debit": 1200,
		 *   "credit": 0,
		 *   "accounting_lettering": "",
		 *   "accounting_lettering_date": "",
		 *   "lockdate": "",
		 *   "currency_amount": null,
		 *   "currency_code": null
		 * }
		 */
		journalANResource: components['schemas']['JournalBaseResource'] & {
			/**
			 * Format: date
			 * @description Document pay date
			 */
			paydate?: string
			/** @description Analytic axis code */
			analytic_code?: string
		}
		/**
		 * @example {
		 *   "journal_code": "CA",
		 *   "journal_label": "Journal de caisse",
		 *   "journal_entry_number": "",
		 *   "accountdate": "17/02/2020",
		 *   "account_number": "70720000",
		 *   "account_label": "Ventes de marchandises",
		 *   "account_third_party_number": "",
		 *   "account_third_party_label": "",
		 *   "document_number": "Vente de Marchandises",
		 *   "documentdate": "15/01/2020",
		 *   "journal_entry_label": "Vente de Marchandises",
		 *   "debit": 0,
		 *   "credit": 324,
		 *   "accounting_lettering": "",
		 *   "accounting_lettering_date": "",
		 *   "lockdate": "",
		 *   "currency_amount": null,
		 *   "currency_code": null
		 * }
		 */
		journalCashResource: components['schemas']['JournalBaseResource']
		JournalBaseResource: {
			/**
			 * @description Journal code
			 * @example AC
			 */
			journal_code?: string
			/**
			 * @description Journal label
			 * @example Journal d'achat
			 */
			journal_label?: string
			/**
			 * @description Journal entry number
			 * @example
			 */
			journal_entry_number?: string
			/**
			 * Format: date
			 * @description Accounting date
			 * @example 10/10/2019
			 */
			accountdate?: string
			/**
			 * @description Account number
			 * @example 40100000
			 */
			account_number?: string
			/**
			 * @description Account label
			 * @example Compte comptable fournisseur
			 */
			account_label?: string
			/**
			 * @description Third party account
			 * @example F160
			 */
			account_third_party_number?: string
			/**
			 * @description Third party account label
			 * @example Triiptic
			 */
			account_third_party_label?: string
			/**
			 * @description Document number
			 * @example HA-20200002348
			 */
			document_number?: string
			/**
			 * Format: date
			 * @description Document date
			 * @example 10/10/2019
			 */
			documentdate?: string
			/**
			 * @description Journal entry label
			 * @example Triiptic
			 * Etudes et prestations de service
			 */
			journal_entry_label?: string
			/**
			 * Format: float
			 * @description Debit
			 * @example 0
			 */
			debit?: number
			/**
			 * Format: float
			 * @description Credit
			 * @example 388.8
			 */
			credit?: number
			/**
			 * @description Lettering
			 * @example
			 */
			accounting_lettering?: string
			/**
			 * Format: date
			 * @description Lettering date
			 * @example
			 */
			accounting_lettering_date?: string
			/**
			 * Format: date
			 * @description Entry lockdate
			 * @example
			 */
			lockdate?: string
			/**
			 * Format: float
			 * @description Currency amount
			 * @example null
			 */
			currency_amount?: number | null
			/**
			 * @description Currency code
			 * @example null
			 */
			currency_code?: string | null
			/** @description Document link */
			document_link?: string
			/** @description Line number */
			line_number?: number
			/** @description File name */
			filename?: string
		}
		/** @enum {string} */
		LabelTel:
			| 'Assistant(e)'
			| 'Tel Bureau'
			| 'Tel Bureau 2'
			| 'Télécopie (bureau)'
			| 'Télécopie (domicile)'
			| 'Portable'
			| 'Domicile'
			| 'Domicile 2'
			| 'Principal'
			| 'Secondaire'
			| 'Autre 1'
			| 'Autre 2'
		/** @description Contact client civility */
		Civility: string
		/** @description Linked client informations */
		LinkedClient: {
			/**
			 * @description Linked client Id
			 * @example 9876
			 */
			clientid?: number
			/**
			 * @description Client Code identifier
			 * @example C00123
			 */
			code?: string
			/**
			 * @description Client civility
			 * @example M.
			 */
			civility?: string
			/**
			 * @description Client name
			 * @example Triiptic
			 */
			name?: string
		}
		/** @description Linked Prospect informations */
		LinkedProspect: {
			/**
			 * @description Linked prospect Id
			 * @example 9876
			 */
			prospectid?: number
			/**
			 * @description Prospect name
			 * @example Triiptic
			 */
			name?: string
		}
		/** @description Linked supplier informations */
		LinkedSupplier: {
			/**
			 * @description Linked supplier Id
			 * @example 9876
			 */
			supplierid?: number
			/**
			 * @description Supplier Code identifier
			 * @example C00123
			 */
			code?: string
			/**
			 * @description Supplier name
			 * @example Triiptic
			 */
			name?: string
		}
		/** @description Payment method informations */
		PaymentPayType: {
			/**
			 * @description Payment method Id
			 * @example 4
			 */
			paytypeid?: number
			/**
			 * @description Payment method label
			 * @example Chèque
			 */
			paytype?: string
		}
		CompanyDefault: {
			/**
			 * @description Company code identifier
			 * @example 1234
			 */
			company_code?: string
			/**
			 * @description Name
			 * @example Triiptic
			 */
			company_name?: string
			/**
			 * @description Access path for the company
			 * @example masociete
			 */
			access_path?: string
			/**
			 * Format: email
			 * @description Email
			 * @example contact@triiptic.fr
			 */
			email?: string
			/**
			 * @description Phone
			 * @example 01 46 72 50 04
			 */
			phone?: string
			/** @description Legal status informations */
			legal_status?: components['schemas']['LegalStatus']
		}
		CompanyCollection: {
			data?: components['schemas']['Company'][]
		} & components['schemas']['Pagination']
		Company: {
			/**
			 * @description Object unique identifier
			 * @example 2
			 */
			companyid?: number
		} & components['schemas']['CompanyDefault'] & {
				address?: components['schemas']['Address']
				home_site?: components['schemas']['HomeSite']
				template_menu?: components['schemas']['TemplateMenu']
				accounting?: components['schemas']['Accounting']
				/**
				 * Format: date-time
				 * @description User last connection date
				 * @example 2019-10-10T09:26:39.000000Z
				 */
				lastconnect?: string | null
				/**
				 * @description Fonctional mode
				 * @enum {string}
				 */
				mode?: 'BUSINESS' | 'BANKING'
				/**
				 * @description Determines if the company is in production mode
				 * @example false
				 */
				live?: boolean
			}
		Subscribe: components['schemas']['CompanyDefault'] & {
			/**
			 * @description Legal status [code](#section/Legal-status-list)
			 * @example other
			 */
			legal_status?: string
			/**
			 * @description Legal status other, this field is accepted only when legal_status set to other, required if legal_status set to other
			 * @example Fiducie
			 */
			legal_status_other?: string
			/**
			 * @description Company template menu<br>*Optional if you have only one template menu available or if you have a company billing*
			 * @example 6512
			 */
			template_menuid: number
			/**
			 * @description Company template export
			 * @example 3512
			 */
			template_exportid?: number
			/**
			 * @description Company address line 1
			 * @example 101 avenue du Général Leclerc
			 */
			addr?: string
			/**
			 * @description Company address line 2
			 * @example Etage 2
			 */
			addr2?: string
			/**
			 * @description Company postcode
			 * @example 75014
			 */
			postcode?: string
			/**
			 * @description Company town
			 * @example Paris
			 */
			town?: string
			/**
			 * @description Company's country ISO2 code
			 * @example FR
			 */
			country_iso2?: string
			/**
			 * @description Business Number (SIRET)
			 * @example 123 456 789 12345
			 */
			business_number?: string
			/**
			 * @description Main activity code (APE, NAF)
			 * @example 1234A
			 */
			activity_number?: string
			/**
			 * @description Intra-community VAT number<br>Set the 'N/C' if Not Concerned, Not Known or Not Communicated
			 * @example FR20123456789
			 */
			vat_number?: string
			/**
			 * @description Company registration number (RCS, RM)
			 * @example RCS PARIS 12345678912345
			 */
			immat_number?: string
			/**
			 * @description Affiliated site Id
			 * @example 34
			 */
			home_siteid?: number | null
			/**
			 * @description Send an email notification for the company creation
			 * @example true
			 */
			email_notification?: boolean
		}
		ContactClientCollection: {
			data?: components['schemas']['ContactClient'][]
		} & components['schemas']['Pagination']
		ContactClient: {
			/**
			 * @description Object unique identifier
			 * @example 8568
			 */
			contactid?: number
			/**
			 * @description Contact client’s creator ID
			 * @example 3780
			 */
			userid?: number
			client?: components['schemas']['LinkedClient']
			/**
			 * @description Contact client civility
			 * @example Monsieur
			 */
			civility?: string
			/**
			 * @description Contact last name
			 * @example Gasquet
			 */
			lastname?: string
			/**
			 * @description Contact first name
			 * @example Olivier
			 */
			firstname?: string
			/**
			 * Format: email
			 * @description Contact email address
			 * @example contact@triiptic.fr
			 */
			email?: string
			/**
			 * @description Contact Job/Function
			 * @example CTO
			 */
			profil?: string
			/**
			 * @description Primary phone label
			 * @example Tél bureau
			 * @enum {string}
			 */
			label_tel_primary?:
				| 'Assistant(e)'
				| 'Tel Bureau'
				| 'Tel Bureau 2'
				| 'Télécopie (bureau)'
				| 'Télécopie (domicile)'
				| 'Portable'
				| 'Domicile'
				| 'Domicile 2'
				| 'Principal'
				| 'Secondaire'
				| 'Autre 1'
				| 'Autre 2'
			/**
			 * @description Primary phone number
			 * @example 01 46 72 50 04
			 */
			tel_primary?: string
			/**
			 * @description Secondary phone label
			 * @example Portable
			 * @enum {string}
			 */
			label_tel_secondary?:
				| 'Assistant(e)'
				| 'Tel Bureau'
				| 'Tel Bureau 2'
				| 'Télécopie (bureau)'
				| 'Télécopie (domicile)'
				| 'Portable'
				| 'Domicile'
				| 'Domicile 2'
				| 'Principal'
				| 'Secondaire'
				| 'Autre 1'
				| 'Autre 2'
			/**
			 * @description Secondary phone number
			 * @example +33600000000
			 */
			tel_secondary?: string
			/**
			 * @description Tertiary phone label
			 * @example Télécopie (bureau)
			 * @enum {string}
			 */
			label_tel_tertiary?:
				| 'Assistant(e)'
				| 'Tel Bureau'
				| 'Tel Bureau 2'
				| 'Télécopie (bureau)'
				| 'Télécopie (domicile)'
				| 'Portable'
				| 'Domicile'
				| 'Domicile 2'
				| 'Principal'
				| 'Secondaire'
				| 'Autre 1'
				| 'Autre 2'
			/**
			 * @description Tertiary phone number
			 * @example 0900000000
			 */
			tel_tertiary?: string
			/** @description Determines if the contact is active */
			enabled?: boolean
			/**
			 * @description Contact consent informations
			 * @enum {string}
			 */
			consent?: 'without' | 'authorized' | 'unauthorized'
			custom_fields?: components['schemas']['CustomFieldCollection']
		}
		ContactProspectCollection: {
			data?: components['schemas']['ContactProspect'][]
		} & components['schemas']['Pagination']
		ContactProspect: {
			/**
			 * @description Object unique identifier
			 * @example 8568
			 */
			contactid?: number
			/**
			 * @description Contact prospect’s creator ID
			 * @example 3780
			 */
			userid?: number
			prospect?: components['schemas']['LinkedProspect']
			/**
			 * @description Contact prospect civility
			 * @example Monsieur
			 */
			civility?: string
			/**
			 * @description Contact last name
			 * @example Gasquet
			 */
			lastname?: string
			/**
			 * @description Contact first name
			 * @example Olivier
			 */
			firstname?: string
			/**
			 * Format: email
			 * @description Contact email address
			 * @example contact@triiptic.fr
			 */
			email?: string
			/**
			 * @description Contact Job/Function
			 * @example CTO
			 */
			profil?: string
			/**
			 * @description Primary phone label
			 * @example Tél bureau
			 * @enum {string}
			 */
			label_tel_primary?:
				| 'Assistant(e)'
				| 'Tel Bureau'
				| 'Tel Bureau 2'
				| 'Télécopie (bureau)'
				| 'Télécopie (domicile)'
				| 'Portable'
				| 'Domicile'
				| 'Domicile 2'
				| 'Principal'
				| 'Secondaire'
				| 'Autre 1'
				| 'Autre 2'
			/**
			 * @description Primary phone number
			 * @example 01 46 72 50 04
			 */
			tel_primary?: string
			/**
			 * @description Secondary phone label
			 * @example Portable
			 * @enum {string}
			 */
			label_tel_secondary?:
				| 'Assistant(e)'
				| 'Tel Bureau'
				| 'Tel Bureau 2'
				| 'Télécopie (bureau)'
				| 'Télécopie (domicile)'
				| 'Portable'
				| 'Domicile'
				| 'Domicile 2'
				| 'Principal'
				| 'Secondaire'
				| 'Autre 1'
				| 'Autre 2'
			/**
			 * @description Secondary phone number
			 * @example +33600000000
			 */
			tel_secondary?: string
			/**
			 * @description Tertiary phone label
			 * @example Télécopie (bureau)
			 * @enum {string}
			 */
			label_tel_tertiary?:
				| 'Assistant(e)'
				| 'Tel Bureau'
				| 'Tel Bureau 2'
				| 'Télécopie (bureau)'
				| 'Télécopie (domicile)'
				| 'Portable'
				| 'Domicile'
				| 'Domicile 2'
				| 'Principal'
				| 'Secondaire'
				| 'Autre 1'
				| 'Autre 2'
			/**
			 * @description Tertiary phone number
			 * @example 0900000000
			 */
			tel_tertiary?: string
			/**
			 * @description Contact consent informations
			 * @enum {string}
			 */
			consent?: 'without' | 'authorized' | 'unauthorized'
			custom_fields?: components['schemas']['CustomFieldCollection']
		}
		SubscriptionCollection: {
			data?: components['schemas']['Subscription'][]
		} & components['schemas']['Pagination']
		TemplateMenuCollection: {
			data?: components['schemas']['TemplateMenu'][]
		} & components['schemas']['Pagination']
		Subscription: {
			/**
			 * @description Contract type
			 * @example COMBO
			 * @enum {string}
			 */
			contract?:
				| 'EI'
				| 'USER'
				| 'COMBO'
				| 'BANK'
				| 'ROBOCR'
				| 'SMOOTHIE'
				| 'BNC'
			/**
			 * @description Subscription type
			 * @example COMPANY
			 * @enum {string}
			 */
			type?: 'COMPANY' | 'USER' | 'BANK' | 'ROBOCR'
			/**
			 * @description Subscription duration
			 * @example 1 months
			 * @enum {string}
			 */
			duration?: '1 month' | '12 months'
			/**
			 * @description Number of users created with the subscription
			 * @example 0
			 */
			nb_users?: number
			/**
			 * Format: date-time
			 * @description Start date
			 * @example 2020-03-30T18:30:00.000000Z
			 */
			startdate?: string
			/**
			 * Format: date-time
			 * @description End date
			 * @example 2020-04-30T18:30:00.000000Z
			 */
			enddate?: string
			amount?: {
				/**
				 * Format: float
				 * @description Amount excluding vat
				 * @example 40
				 */
				vat_exclude?: number
				/**
				 * Format: float
				 * @description Amount including vat
				 * @example 48
				 */
				vat_include?: number
			}
		}
		TemplateMenu: {
			/**
			 * @description Object unique identifier
			 * @example 153
			 */
			template_menuid?: number
			/**
			 * @description Template menu label
			 * @example full
			 */
			label?: string
			/**
			 * @description Fonctional mode
			 * @enum {string}
			 */
			mode?: 'business' | 'banking'
			/**
			 * @description Fonctional mode label
			 * @example Matching document with bank
			 */
			mode_label?: string
			/**
			 * Format: date-time
			 * @description Template menu creation date
			 */
			stampdate?: string
		}
		TemplateExportCollection: {
			data?: components['schemas']['TemplateExport'][]
		} & components['schemas']['Pagination']
		TemplateExport: {
			/**
			 * @description Object unique identifier
			 * @example 153
			 */
			template_exportid?: number
			/**
			 * @description Template export label
			 * @example Outil de production comptable
			 */
			label?: string
		}
		/** @description Custom fields collection */
		CustomFieldCollection: components['schemas']['CustomField']
		/** @description Custom field */
		CustomField: {
			/** @description Hash of the custom field id */
			custom_field_api?: {
				/** @example label1 */
				label?: string
				/** @example value1 */
				value?: string
			}
			/** @description Hash of another custom field id */
			custom_field_api2?: {
				/** @example label2 */
				label?: string
				/** @example value2 */
				value?: string
			}
		}
		SaleOrderCollection: {
			data?: components['schemas']['SaleOrder'][]
		} & components['schemas']['Pagination']
		SaleOrder: {
			/**
			 * @description Object unique identifier
			 * @example 2476128
			 */
			orderid?: number
			/**
			 * @description Document number
			 * @example F-20190000160
			 */
			document_number?: string
			/**
			 * @description Document’s creator ID
			 * @example 3780
			 */
			userid?: number
			client?: components['schemas']['LinkedClient']
			default_currency?: components['schemas']['DefaultCurrency']
			/** @example null */
			document_currency?: components['schemas']['DocumentCurrency'] | null
			total?: components['schemas']['SellDocTotal'] & {
				/**
				 * Format: float
				 * @description Total amount remaining on this document
				 * @example 0
				 */
				net_to_pay?: number
			}
			/** @example null */
			currency_total?:
				| (components['schemas']['SellDocCurrencyTotal'] & {
						/**
						 * Format: float
						 * @description Total amount remaining on this document in currency
						 * @example 250
						 */
						net_to_pay?: number
				  })
				| null
			/**
			 * @description Document status code
			 * @example 2
			 */
			status_code?: number
			/**
			 * @description Document status
			 * @example create
			 */
			status?: string
			/** @description Document status dates */
			status_dates?: {
				/**
				 * Format: date-time
				 * @description Document emission date
				 * @example 2019-10-10T09:26:39.000000Z
				 */
				create?: string | null
				/**
				 * Format: date-time
				 * @description Document sent date
				 * @example null
				 */
				sent?: string | null
				/**
				 * Format: date-time
				 * @description Document accept date
				 * @example null
				 */
				accept?: string | null
				/**
				 * Format: date-time
				 * @description Date when document has been set on waiting state.
				 * @example null
				 */
				wait?: string | null
				/**
				 * Format: date-time
				 * @description Document reject date
				 * @example null
				 */
				reject?: string | null
				/**
				 * Format: date-time
				 * @description Document pack date
				 * @example null
				 */
				pack?: string | null
				/**
				 * Format: date-time
				 * @description Document invoice date
				 * @example null
				 */
				invoice?: string | null
				/**
				 * Format: date-time
				 * @description Document close date
				 * @example 2019-10-10T09:37:12.000000Z
				 */
				close?: string | null
			}
			/**
			 * @description object on the document
			 * @example Abonnement Logiciel Gestion Commerciale
			 */
			object?: string
			/**
			 * Format: date
			 * @description Document date
			 * @example 2019-10-10
			 */
			documentdate?: string
			/**
			 * Format: date
			 * @description Due date of the document
			 * @example 2019-10-25
			 */
			duedate?: string
			/**
			 * Format: date
			 * @description Execution date of payment terms
			 * @example 2019-09-12
			 */
			execdate?: string
			/**
			 * Format: date-time
			 * @description Delivery date of the document
			 * @example null
			 */
			delivery_date?: string | null
			/**
			 * @description Withdrawal period
			 * @example null
			 */
			retract?: boolean | null
			term?: components['schemas']['Term']
			/**
			 * @description Comments on the document with html
			 * @example Titulaire du compte : Hingis160 SARL<br />
			 * Domiciliation du compte : Boulogne<br />
			 * IBAN : FR7612345678901234567890123
			 */
			comment?: string
			/**
			 * @description Comments on the document without html
			 * @example Titulaire du compte : Hingis160 SARL
			 * Domiciliation du compte : Boulogne
			 * IBAN : FR7612345678901234567890123
			 */
			comment_clean?: string
			/**
			 * @description External Document number
			 * @example EXT001
			 */
			external_document_number?: string
			/**
			 * @description Determines if the document is active
			 * @example true
			 */
			enabled?: boolean
			analytic?: components['schemas']['Analytic']
			/**
			 * @description Link of document file
			 * @example https://.../files/corder/2476128
			 */
			file?: string
			/**
			 * @description Link of linked documents list
			 * @example https://.../links/corder/2476128
			 */
			links?: string
			/**
			 * @description Webdocument link
			 * @example https://.../modules/webdoc/5MDKOED5NATQJGE21886-9ccce0c003319d10d2e94af0c75977ed
			 */
			webdoc?: string | null
			items?: components['schemas']['SellDocItem']
		}
		QuoteCollection: {
			data?: components['schemas']['Quote'][]
		} & components['schemas']['Pagination']
		Quote: {
			/**
			 * @description Object unique identifier
			 * @example 2476128
			 */
			quoteid?: number
			/**
			 * @description Document number
			 * @example F-20190000160
			 */
			document_number?: string
			/**
			 * @description Document’s creator ID
			 * @example 3780
			 */
			userid?: number
			client?: components['schemas']['LinkedClient'] | null
			/** @example null */
			prospect?: components['schemas']['LinkedProspect'] | null
			/**
			 * @description Organization's type of the quote
			 * @example CLIENT
			 */
			organization?: string
			default_currency?: components['schemas']['DefaultCurrency']
			/** @example null */
			document_currency?: components['schemas']['DocumentCurrency'] | null
			total?: components['schemas']['SellDocTotal'] & {
				/**
				 * Format: float
				 * @description Total amount remaining on this document
				 * @example 0
				 */
				net_to_pay?: number
			}
			/** @example null */
			currency_total?:
				| (components['schemas']['SellDocCurrencyTotal'] & {
						/**
						 * Format: float
						 * @description Total amount remaining on this document in currency
						 * @example 250
						 */
						net_to_pay?: number
				  })
				| null
			/**
			 * @description Document status code
			 * @example 2
			 */
			status_code?: number
			/**
			 * @description Document status
			 * @example create
			 */
			status?: string
			/** @description Document status dates */
			status_dates?: {
				/**
				 * Format: date-time
				 * @description Document emission date
				 * @example 2019-10-10T09:26:39.000000Z
				 */
				create?: string | null
				/**
				 * Format: date-time
				 * @description Document sent date
				 * @example null
				 */
				sent?: string | null
				/**
				 * Format: date-time
				 * @description Document accept date
				 * @example null
				 */
				accept?: string | null
				/**
				 * Format: date-time
				 * @description Date when document has been set on waiting state.
				 * @example null
				 */
				wait?: string | null
				/**
				 * Format: date-time
				 * @description Document reject date
				 * @example null
				 */
				reject?: string | null
				/**
				 * Format: date-time
				 * @description Document order date
				 * @example null
				 */
				order?: string | null
				/**
				 * Format: date-time
				 * @description Document pack date
				 * @example null
				 */
				pack?: string | null
				/**
				 * Format: date-time
				 * @description Document invoice date
				 * @example null
				 */
				invoice?: string | null
				/**
				 * Format: date-time
				 * @description Document close date
				 * @example null
				 */
				close?: string | null
			}
			/**
			 * @description object on the document
			 * @example Abonnement Logiciel Gestion Commerciale
			 */
			object?: string
			/**
			 * Format: date
			 * @description Document date
			 * @example 2019-10-10
			 */
			documentdate?: string
			/**
			 * Format: date
			 * @description Due date of the document
			 * @example 2019-10-25
			 */
			duedate?: string
			/**
			 * Format: date
			 * @description Execution date of payment terms
			 * @example 2019-09-12
			 */
			execdate?: string
			/**
			 * Format: date-time
			 * @description Delivery date of the document
			 * @example null
			 */
			delivery_date?: string | null
			/**
			 * Format: integer
			 * @description Validity duration of the document in days
			 * @example 5
			 */
			validity?: number | null
			term?: components['schemas']['Term']
			/**
			 * @description Comments on the document with html
			 * @example Titulaire du compte : Hingis160 SARL<br />
			 * Domiciliation du compte : Boulogne<br />
			 * IBAN : FR7612345678901234567890123
			 */
			comment?: string
			/**
			 * @description Comments on the document without html
			 * @example Titulaire du compte : Hingis160 SARL
			 * Domiciliation du compte : Boulogne
			 * IBAN : FR7612345678901234567890123
			 */
			comment_clean?: string
			/**
			 * @description External Document number
			 * @example EXT001
			 */
			external_document_number?: string
			/**
			 * @description Determines if the document is active
			 * @example true
			 */
			enabled?: boolean
			analytic?: components['schemas']['Analytic']
			/**
			 * @description Link of document file
			 * @example https://.../files/quote/2476128
			 */
			file?: string
			/**
			 * @description Link of linked documents list
			 * @example https://.../links/quote/2476128
			 */
			links?: string
			/**
			 * @description Webdocument link
			 * @example https://.../modules/webdoc/2MDKOED5NATQJGE21886-9ccce0c003319d10d2e94af0c75977ed
			 */
			webdoc?: string | null
			items?: components['schemas']['SellDocItem']
		}
		LockableDocument: {
			/** @description Document locked<br>True if locked and false otherwise */
			locked?: boolean | null
			/**
			 * Format: date-time
			 * @description Document lock date
			 * @example null
			 */
			lockdate?: string | null
		}
		PayableDocumentStatusDate: {
			/** @description Document status date */
			status_dates?: {
				/**
				 * Format: date-time
				 * @description Document partially paid date
				 * @example null
				 */
				inpayment?: string | null
				/**
				 * Format: date-time
				 * @description Document paid date
				 * @example null
				 */
				paid?: string | null
				/**
				 * Format: date-time
				 * @description Document match date
				 * @example null
				 */
				match?: string | null
			}
		}
		LinkItemResource: {
			/**
			 * @description Document unique Identifier
			 * @example 123456
			 */
			id?: number
			/**
			 * @description Link to the document resource
			 * @example https://www.evoliz.io/api/companies/X/invoices/123456
			 */
			link?: string
		}
		LinkResource: {
			/** @description List of credits linked to the requested document */
			credits?: components['schemas']['LinkItemResource'][]
			/** @description List of payments linked to the requested document */
			payments?: components['schemas']['LinkItemResource'][]
			/** @description List of advances linked to the requested document */
			advances?: components['schemas']['LinkItemResource'][]
			/** @description List of invoices linked to the requested document */
			invoices?: components['schemas']['LinkItemResource'][]
			/** @description List of deliveries linked to the requested document */
			deliveries?: components['schemas']['LinkItemResource'][]
			/** @description List of sale orders linked to the requested document */
			sale_orders?: components['schemas']['LinkItemResource'][]
			/** @description List of quotes linked to the requested document */
			quotes?: components['schemas']['LinkItemResource'][]
			/** @description List of cash entries linked to the requested document */
			cashentries?: components['schemas']['LinkItemResource'][]
		}
		/** @description Sale order item, if an articleid is given : item will be created from the given article and other given values will overrides the article ones. */
		ItemWithArticleId: {
			/**
			 * @description Article unique identifier
			 * @example 12345
			 */
			articleid: number
			/**
			 * @description Override article reference with html
			 * @example SPLIT
			 */
			reference?: string
			/**
			 * @description Override article designation with html
			 * @example Banana Split <br />
			 * Pour une durée de 12 mois
			 */
			designation?: string
			/**
			 * Format: float
			 * @description Override article quantity, required when no articleid is given
			 * @example 12.5
			 */
			quantity?: number
			/**
			 * @description Override article quantity unit
			 * @example U
			 */
			unit?: string
			/**
			 * Format: float
			 * @description Override article unit price excluding vat
			 * @example 30.25
			 */
			unit_price_vat_exclude?: number
			/**
			 * Format: float
			 * @description Override article VAT rate
			 * @example 5.5
			 */
			vat_rate?: number
			/** @description Override item rebate */
			rebate?: number | string
			/**
			 * @description Override article sale classification id, only accepted when sale classification are enabled, required if invoice is checked in classifications configuration.
			 * @example 45732
			 */
			sale_classificationid?: number
		}
		/** @description Sale order item, if an articleid is given : item will be created from the given article and other given values will overrides the article ones. */
		ItemWithoutArticleId: {
			/**
			 * @description Item reference with html
			 * @example SPLIT
			 */
			reference?: string
			/**
			 * @description Item designation with html
			 * @example Banana Split <br />
			 * Pour une durée de 12 mois
			 */
			designation: string
			/**
			 * Format: float
			 * @description Item quantity
			 * @example 12.5
			 */
			quantity: number
			/**
			 * @description Quantity unit
			 * @example U
			 */
			unit?: string
			/**
			 * Format: float
			 * @description Item unit price excluding vat
			 * @example 30.25
			 */
			unit_price_vat_exclude: number
			/**
			 * Format: float
			 * @description Item VAT rate
			 * @example 5.5
			 */
			vat_rate?: number
			/** @description Item rebate */
			rebate?: number | string
			/**
			 * @description Item sale classification id, only accepted when sale classification are enabled, required if invoice is checked in classifications configuration.
			 * @example 45732
			 */
			sale_classificationid?: number
		}
		/** @description Total sale margin information */
		SaleDocumentMargin: {
			/**
			 * Format: float
			 * @description Total purchase price
			 * @example 16
			 */
			purchase_price_vat_exclude?: number
			/**
			 * Format: float
			 * @description Total margin percent
			 * @example 87.5
			 */
			margin_percent?: number
			/**
			 * Format: float
			 * @description Total markup percent
			 * @example 46.67
			 */
			markup_percent?: number
			/**
			 * Format: float
			 * @description Total margin amount
			 * @example 20
			 */
			amount?: number
		} | null
		/** @description Sale margin information */
		itemMargin: {
			/**
			 * Format: float
			 * @description Purchase unit price
			 * @example 16
			 */
			purchase_unit_price_vat_exclude?: number
			/**
			 * Format: float
			 * @description Margin coefficient
			 * @example 3.6
			 */
			coefficient?: number
			/**
			 * Format: float
			 * @description Margin percent
			 * @example 87.5
			 */
			margin_percent?: number
			/**
			 * Format: float
			 * @description Markup percent
			 * @example 46.67
			 */
			markup_percent?: number
			/**
			 * Format: float
			 * @description Margin amount
			 * @example 20
			 */
			amount?: number
		} | null
		/** @description Cash */
		Cash: {
			/**
			 * @description Object unique identifier
			 * @example 45
			 */
			cashid?: number
			/**
			 * @description Cash creator's ID
			 * @example 3780
			 */
			userid?: number
			/**
			 * @description Cash label
			 * @example Caisse Toulon
			 */
			label?: string
			/**
			 * Format: date-time
			 * @description Cash creation date
			 * @example 2022-01-01T09:26:39.000000Z
			 */
			stampdate?: string
			/**
			 * Format: date
			 * @description Cash start date
			 * @example 2022-01-01
			 */
			startdate?: string
			/**
			 * @description Accounting code
			 * @example 530
			 */
			accounting_code?: string
			/**
			 * @description Journal code
			 * @example CA
			 */
			journal_code?: string
			paytypes?: components['schemas']['CashPaytypes']
		}
		/**
		 * @description Precise the reason of the contribution.
		 *
		 * * `1` - Personal contribution
		 * * `2` - Company contribution
		 * * `3` - Internal transfer
		 * * `4` - I don't know
		 *
		 * @example 1
		 * @enum {integer}
		 */
		Reason: 1 | 2 | 3 | 4
		/** @description Linked cash entry */
		LinkedCashEntry: {
			/**
			 * @description Object unique identifier
			 * @example 4545
			 */
			entryid?: number
			/**
			 * Format: date-time
			 * @description Cash entry date
			 * @example 2022-01-01
			 */
			date?: string
			/** @description The cash entry linked cash */
			cash?: {
				/**
				 * @description Cash unique identifier
				 * @example 45
				 */
				cashid?: number
				/**
				 * @description Cash label
				 * @example Caisse Toulon
				 */
				label?: string
			}
		}
		/** @description Cash entry */
		CashEntry: {
			/**
			 * @description Object unique identifier
			 * @example 4545
			 */
			entryid?: number
			/**
			 * @description The related cash Id
			 * @example 45
			 */
			cashid?: number
			/** @description Cash entry creator ID */
			userid?: unknown
			/**
			 * Format: date-time
			 * @description Cash entry creation date
			 * @example 2022-01-01T09:26:39.000000Z
			 */
			stampdate?: string
			/**
			 * Format: date
			 * @description Cash entry date
			 * @example 2022-01-01
			 */
			date?: string
			/** @description Sales related entries */
			sales?: {
				/** @description Turnover related entries */
				turnover?: {
					/**
					 * Format: float
					 * @description Turnover entries total amount
					 * @example 54.45
					 */
					total?: number
					/** @description Sale classifications entries */
					classifications?: {
						/**
						 * Format: integer
						 * @description Sale classification unique identifier
						 * @example 25
						 */
						sale_classificationid?: number
						/**
						 * @description Sale classification code
						 * @example 02
						 */
						code?: string
						/**
						 * @description Sale classification label
						 * @example Frais de Port Facturés
						 */
						label?: string
						/** @description Classification total amounts */
						total?: {
							/**
							 * Format: float
							 * @description Total amount of the entry excluding vat
							 * @example 360
							 */
							vat_exclude?: number
							/**
							 * Format: float
							 * @description Total amount of vat
							 * @example 72
							 */
							vat?: number
							/**
							 * Format: float
							 * @description Total amount of the entry including vat
							 * @example 432
							 */
							vat_include?: number
						}
						/**
						 * Format: float
						 * @description Vat rate
						 * @example 2.1
						 */
						vat?: number
					}[]
					/** @description Payments entries */
					payments?: components['schemas']['Payment'][]
				}
				/** @description Paytypes entries */
				paytypes?: {
					/**
					 * Format: float
					 * @description Paytypes entries total amount
					 * @example 54.45
					 */
					total?: number
					/** @description Paytypes entries */
					entries?: {
						/** @description Paytype */
						paytype?: {
							/**
							 * @description Cash paytype Id
							 * @example 1109
							 */
							id?: number
							/**
							 * @description Cash paytype label
							 * @example Espèces
							 */
							label?: string
						}
						/**
						 * Format: float
						 * @description The paytype entry amount
						 * @example 150.25
						 */
						amount?: number
					}[]
				}
			}
			/** @description Purchases related entries */
			purchases?: {
				/**
				 * Format: float
				 * @description Purchases entries total amount
				 * @example 54.45
				 */
				total?: number
				/** @description Buys entries */
				buys?: components['schemas']['Buy'][]
			}
			/** @description Paytypes deposits */
			paytypes_deposits?: {
				/**
				 * Format: float
				 * @description Paytypes deposits total amount
				 * @example 54.45
				 */
				total?: number
				/** @description Paytype deposits entries */
				entries?: {
					/** @description Paytype */
					paytype?: {
						/**
						 * @description Cash paytype Id
						 * @example 1109
						 */
						id?: number
						/**
						 * @description Cash paytype label
						 * @example Espèces
						 */
						label?: string
					}
					/**
					 * Format: float
					 * @description The paytype entry amount
					 * @example 150.25
					 */
					amount?: number
					/**
					 * @description Tells whether the related paytype has fees
					 * @example true
					 */
					with_fees?: boolean
					/** @description Deposit cost */
					cost?: {
						/**
						 * Format: float
						 * @description Cost Amount
						 * @example 10.5
						 */
						amount?: number
						/**
						 * Format: float
						 * @description Cost vat amount
						 * @example 1.5
						 */
						vat?: number
					} | null
				}[]
			}
			/** @description Miscellaneous amounts */
			others?: {
				/** @description Cash contribution (cash money injected into the cash register) */
				cash_contribution?: {
					/**
					 * Format: float
					 * @description Cash contribution amount
					 * @example 25.33
					 */
					amount?: number
					reason?: components['schemas']['Reason']
					/** @description Cash contribution comment */
					comment?: string
				}
				/**
				 * Format: float
				 * @description Cash difference (difference between the theoretical cash balance and the actual cash balance)
				 * @example 20
				 */
				cash_difference?: number
				/** @description Cash disbursement (cash output apart buys) */
				cash_disbursement?: {
					/**
					 * Format: float
					 * @description Cash disbursement amount
					 * @example 25.33
					 */
					amount?: number
					affectation?: components['schemas']['Affectation']
				}
			}
			/**
			 * @description Link to cash entry file
			 * @example https://.../files/cash-deposit/2476128
			 */
			file?: string
		}
		CashCollection: {
			data?: components['schemas']['Cash'][]
		} & components['schemas']['Pagination']
		CashEntryCollection: {
			data?: components['schemas']['CashEntry'][]
		} & components['schemas']['Pagination']
		/**
		 * @example [
		 *   {
		 *     "paytypeid": 44,
		 *     "label": "Espèce",
		 *     "automatic": false,
		 *     "initial_balance": 2000,
		 *     "with_fees": false,
		 *     "accounting_code": "001",
		 *     "balance": 5774.46,
		 *     "enabled": true,
		 *     "cash_paytype": true
		 *   },
		 *   {
		 *     "paytypeid": 45,
		 *     "label": "Carte bancaire",
		 *     "automatic": true,
		 *     "initial_balance": 0,
		 *     "with_fees": false,
		 *     "accounting_code": "002",
		 *     "balance": 0,
		 *     "enabled": true,
		 *     "cash_paytype": false
		 *   }
		 * ]
		 */
		CashPaytypes: components['schemas']['CashPaytype'][]
		/** @description Cash paytype */
		CashPaytype: {
			/**
			 * @description Object unique identifier
			 * @example 45
			 */
			paytypeid?: number
			/**
			 * @description Cash paytype label
			 * @example Carte bancaire
			 */
			label?: string
			/**
			 * @description Tells whether the deposit type is automatic or not
			 * @example true
			 */
			automatic?: boolean
			/**
			 * Format: float
			 * @description Balance at start date
			 * @example 0
			 */
			initial_balance?: number
			/**
			 * @description Determine if the paytype has fees or not
			 * @example false
			 */
			with_fees?: boolean
			/**
			 * @description Paytype’s accounting code
			 * @example 002
			 */
			accounting_code?: string
			/**
			 * Format: float
			 * @description The paytype current balance, for automatic paytypes balance is always 0
			 * @example 0
			 */
			balance?: number
			/**
			 * @description Determine if the paytype is enabled
			 * @example true
			 */
			enabled?: boolean
			/**
			 * @description Determine if the paytype is in cash
			 * @example false
			 */
			cash_paytype?: boolean
		}
		/** @description Legal status */
		LegalStatus: {
			/**
			 * @description Legal status code
			 * @example other
			 */
			legal_status_code?: string
			/**
			 * @description Legal status label
			 * @example Autre statut juridique
			 */
			label?: string
			/**
			 * @description Other legal status label, only when legal_status_code set to other
			 * @example Fiducie
			 */
			other_label?: string | null
		} | null
		Bintray: {
			/**
			 * @description Document filename
			 * @example Facture1.pdf
			 */
			filename?: string
			/**
			 * @description Document date
			 * @example "2020-10-06T12:37:18.000Z"
			 */
			date?: string
			/**
			 * @description Source of the file
			 * @example web
			 * @enum {string}
			 */
			source?: 'web' | 'mobile' | 'scan' | 'email' | 'portal' | 'api'
			/**
			 * @description Link of document file
			 * @example https://.../files/bintray/2476128
			 */
			file?: string
			/** @description Document status */
			status?: {
				/**
				 * @description Status id
				 * @example 2
				 */
				id?: number
				/**
				 * @description Status label
				 * @example validate
				 * @enum {string}
				 */
				label?: 'waiting' | 'locked' | 'validate'
			}
			/**
			 * @description Document type
			 * @example buy
			 * @enum {string}
			 */
			document_type?: 'buy' | 'expense_report'
		}
		DocumentSendEmail: {
			/** @description Array of email recipients address */
			to: string[]
			/**
			 * @description Send copy to your user email address
			 * @example true
			 */
			copy?: boolean
			/**
			 * @description Subject of the email.
			 * @example Here is your Document
			 */
			subject?: string
			/**
			 * @description Body of the email in txt or Html.
			 * @example <h1>Hello world !</h1> <p>Here is your Document</p>
			 */
			body?: string
			/**
			 * @description Send signature of your company in the email
			 * @default true
			 * @example true
			 */
			signature?: boolean
			/**
			 * @description Add "View PDF" and "Download PDF" links at the end of the email. When parameter is not set, the parameter in Evoliz app email setting is used.
			 * @example true
			 */
			links?: boolean
			contact?: {
				/**
				 * @description Contact client civility
				 * @example Monsieur
				 */
				civility?: string
				/**
				 * @description Contact last name
				 * @example Gasquet
				 */
				lastname?: string
				/**
				 * @description Contact first name
				 * @example Olivier
				 */
				firstname?: string
			}
		}
	}
	responses: {
		/** @description Not found */
		NotFound: {
			content: {
				'application/json': {
					/**
					 * @description type error
					 * @example Not Found
					 */
					error?: string
					/**
					 * @description description error
					 * @example Entry for Resource not found
					 */
					message?: string
				}
			}
		}
		/** @description Unauthorized */
		Unauthorized: {
			content: {
				'application/json': {
					/**
					 * @description type error
					 * @example Unauthorized
					 */
					error?: string
					/**
					 * @description description error
					 * @example Error you have no export right
					 */
					message?: string
				}
			}
		}
		/** @description Method Not Allowed */
		MethodNotAllowed: {
			content: {
				'application/json': {
					/**
					 * @description type error
					 * @example Method Not Allowed
					 */
					error?: string
					/**
					 * @description description error
					 * @example Company already in production
					 */
					message?: string
				}
			}
		}
		/** @description Forbidden */
		Forbidden: {
			content: {
				'application/json': {
					/**
					 * @description type error
					 * @example Forbidden
					 */
					error?: string
					/**
					 * @description description error
					 * @example You are not allowed to access this request, only Prescriber admin are allowed
					 */
					message?: string
				}
			}
		}
		/** @description Unprocessable Entity */
		Validation: {
			content: {
				'application/json': {
					/**
					 * @description type error
					 * @example Unauthorized
					 */
					error?: string
					/**
					 * @description description error
					 * @example Error with your credentials
					 */
					message?: string
				}
			}
		}
		/** @description Bad Request Error */
		BadRequest: {
			content: {
				'application/json': {
					/**
					 * @description Type error
					 * @example Bad Request Error
					 */
					error?: string
					/**
					 * @description Error message
					 * @example {
					 *   "param_1": [
					 *     "The param_1 field is required."
					 *   ],
					 *   "param_2": [
					 *     "The param_2 must be a string"
					 *   ]
					 * }
					 */
					message?: {
						/** @description The param_1 errors */
						param_1?: string[]
						/** @description The param_2 errors */
						param_2?: string[]
						/** @description The param_n errors */
						param_n?: string[]
					}
				}
			}
		}
		/** @description Too Many Requests */
		ThrottleRequests: {
			content: {
				'application/json': {
					/**
					 * @description type error
					 * @example Too Many Requests
					 */
					error?: string
					/**
					 * @description description error
					 * @example Only 60 requests per minute are allowed
					 */
					message?: string
				}
			}
		}
		/** @description Dependency Failed */
		Dependency: {
			content: {
				'application/json': {
					/**
					 * @description type error
					 * @example Failed Dependency
					 */
					error?: string
					/**
					 * @description description error
					 * @example The request failed
					 */
					message?: string
				}
			}
		}
	}
	parameters: {
		/** @description Company ID */
		companyParameter: number
		/** @description Pagination parameter. If not specified the default value will be 15. */
		perPageParameter?: number
		/** @description Filter the response by ``document_number``, this filter performs strict comparison. */
		documentNumberParameter?: string
		/**
		 * @description Precise the sort direction. If given, the `sort_by` parameter is required. <br />
		 * Sort order:
		 *   * `asc` - Ascending
		 *   * `desc` - Descending
		 */
		orderParameter?: 'asc' | 'desc'
	}
	requestBodies: {
		/** @description Login the user with valid public and secret keys */
		Login: {
			content: {
				'application/json': components['schemas']['Login']
			}
		}
		/** @description Pass parameter as application/json in raw. */
		InvoiceSendEmail: {
			content: {
				'application/json': components['schemas']['DocumentSendEmail'] &
					Record<string, never> & {
						/** @description Subject of the email. See [dynamic fields](#section/Invoice-email-dynamic-fields/Subject-dynamic-fields-and-their-values) */
						subject?: unknown
						/** @description Body of the email in txt or Html. See [dynamic fields](#section/Invoice-email-dynamic-fields/Body-dynamic-fields-and-their-values) */
						body?: unknown
					}
			}
		}
		/** @description Pass parameter as application/json in raw. */
		QuoteSendEmail: {
			content: {
				'application/json': components['schemas']['DocumentSendEmail'] &
					Record<string, never> & {
						/** @description Subject of the email. See [dynamic fields](#section/Quote-email-dynamic-fields/Subject-dynamic-fields-and-their-values) */
						subject?: unknown
						/** @description Body of the email in txt or Html. See [dynamic fields](#section/Quote-email-dynamic-fields/Body-dynamic-fields-and-their-values) */
						body?: unknown
					}
			}
		}
	}
	headers: never
	pathItems: never
}

export type external = Record<string, never>

export interface operations {
	/**
	 * Company list
	 * @description Return a list of companies visible by the current User, according to visibility restriction set in user profile.
	 */
	getListCompanies: {
		parameters: {
			query?: {
				/** @description Fonctional mode */
				mode_label?: 'business' | 'banking'
				/** @description Affiliated site Id */
				home_siteid?: number
				/** @description Search param */
				search?: string
				/** @description Determines if the company is in production mode */
				live?: boolean
			}
		}
		responses: {
			/** @description Request successfull */
			200: {
				content: {
					'application/json': components['schemas']['CompanyCollection']
				}
			}
			400: components['responses']['BadRequest']
			401: components['responses']['Unauthorized']
			403: components['responses']['Forbidden']
			429: components['responses']['ThrottleRequests']
			/** @description Server error */
			500: never
		}
	}
	/**
	 * Create company
	 * @description Create a new company.
	 */
	createCompany: {
		requestBody: {
			content: {
				'application/json': components['schemas']['Subscribe']
			}
		}
		responses: {
			/** @description Created */
			201: {
				content: {
					'application/json': components['schemas']['Company']
				}
			}
			401: components['responses']['Unauthorized']
			403: components['responses']['Forbidden']
			422: components['responses']['Validation']
			429: components['responses']['ThrottleRequests']
		}
	}
}
